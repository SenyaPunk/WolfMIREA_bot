import random
import time
import re
from typing import Dict, Any, Optional, List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from storage import load_cooldowns, save_cooldowns

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–≥–æ
MAX_DRINKS = 5

# –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DRINKING_COOLDOWN = 3600  # 60 –º–∏–Ω—É—Ç

# –¢–∏–ø—ã –∞–ª–∫–æ–≥–æ–ª—è
DRINKS = {
    "jager": {"name": "–Ø–≥–µ—Ä—å", "emoji": "üü§", "strength": 1.2},
    "cognac": {"name": "–ö–æ–Ω—å—è–∫", "emoji": "ü•É", "strength": 1.0},
    "gin": {"name": "–î–∂–∏–Ω", "emoji": "üç∏", "strength": 0.8},
    "absinthe": {"name": "–ê–±—Å–µ–Ω—Ç", "emoji": "üü¢", "strength": 1.5}
}

# –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–ø—å—è–Ω–µ–Ω–∏—è
DRUNK_MESSAGES = {
    0: {
        "text": "üç∫ —á–µ –Ω–∞–ª—å–µ–º –≤ –≥–ª–æ—Ç–∫—É?\n–≤—ã–±–∏—Ä–∞–π —Ö—Ä–µ–Ω—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å, —á—Ç–æ–± –≤—à—Ç—ã—Ä–∏–ª–æ",
        "effects": []
    },
    1: {
        "text": "–º–º–º, –±–ª—è, –∑–∞–µ–±–∏—Å—å –ø–æ—à–ª–æ\nüòä —Ç–µ–ø–ª–æ —Ä–∞–∑–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ –∫–∏—à–∫–∞–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –ø–∏–∑–¥–µ—Ü –∫–∞–∫ –ø—Ä—ë—Ç –≤–≤–µ—Ä—Ö",
        "effects": ["–µ–±–∞–Ω—É—Ç—ã–π –∫–∞–π—Ñ –≤ –±–∞—à–∫–µ", "—É–ª—ã–±–∫–∞ –¥–æ —É—à–µ–π"]
    },
    2: {
        "text": "–∞—Ö–∑–≤—ã—Ö–∞, —Å—É–∫–∞, —É–∂–µ –≤ —Ç–µ–º–µ!\n –º–∏—Ä –∑–∞—Å–∏—è–ª —Ö—É–µ–≤–æ–π —Ä–∞–¥—É–≥–æ–π, –∞–Ω–µ–∫–¥–æ—Ç—ã —Ä–≤—É—Ç –ø—É–∑–æ, –∞ —è —á—É—Ç—å –Ω–µ —É–ø–∞–ª –æ—Ç —Å–º–µ—Ö–∞ –±–ª—è—Ç—å",
        "effects": ["–¥–∏–∫–∏–π —Ä–∂–∞—á", "—à–∞—Ç–∞—é—Å—å –∫–∞–∫ —Ö—É–π –≤ –ø—Ä–æ—Ä—É–±–∏", "–≤–µ—Å–µ–ª—å–µ –Ω–∞ –ø–æ–ª–Ω—É—é"]
    },
    3: {
        "text": "<b>–æ–æ–æ, –±–ª—è —â–∞—Å –∑–∞–µ–±–∞—Ç–æ –ø–æ–π–¥–µ—Ç...</b>\n—è–∑<b>—ã</b>–∫ –∑–∞–ø–ª–µ—Ç–∞–µ—Ç—Å—è –≤ <b>—É–∑–µ–ª</b>, —Å—Ç–µ–Ω—ã –ø–ª—è—à—É—Ç –∫–∞–∫ —à–ª—é—Ö–∏ <b>–Ω</b>–æ —è –µ—â–µ —Å—Ç–æ—é",
        "effects": ["–ø–∏–∑–¥–µ—Ü –≤ —Å–ª–æ–≤–∞—Ö", "—Å—Ç–µ–Ω—ã –≤ —Ç–∞–Ω—Ü–µ", "–Ω–æ–≥–∏ –∫–∞–∫ –≤–∞—Ç–Ω—ã–µ —Ö—É–∏"]
    },
    4: {
        "text": "<i>–±–ª—è—è—è—è... –∫—Ç–æ</i>, —Å—É–∫<i>–∞</i>, –∫—Ä—É—Ç–∏—Ç —ç—Ç–æ—Ç –µ–±–∞–Ω—ã–π –º<b>–∏—Ä</b>\n\n –≤—Å–µ –≤–µ—Ä—Ç–∏—Ç—Å—è –∫–∞–∫ –≤ <i>–º—è—Å–æ—Ä—É–±</i>–∫–µ, –±–æ—Ä–º–æ—á—É —Ö—É–π–Ω—é, –Ω–æ –µ—â–µ –Ω–µ <b>—Ä—É—Ö–Ω</b>—É–ª...",
        "effects": ["–≥–æ–ª–æ–≤—É —Ä–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏", "—Ä–µ—á—å –∫–∞–∫ —É –¥–µ–±–∏–ª–∞", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤ –∂–æ–ø–µ"]
    },
    5: {
        "text": "ü§¢ <b>—É—É—É—É—Ö, –±–ª—è... –≤—Å–µ, –Ω</b>–∞—Ö—É–π, –∑–∞–≤—è–∑<i>—ã–≤–∞</i>—é...\n\n –º–∏—Ä - —Å–ø–ª–æ—à<i>–Ω–æ–π</i> –ø–∏–∑–¥–µ—Ü –≤ –∫–∞—Ä—É—Å–µ–ª–∏, –Ω–æ–≥–∏ –Ω–µ –¥–µ—Ä–∂–∞—Ç, –±–ª–µ–≤–∞—Ç—å —Ç—è–Ω–µ—Ç",
        "effects": ["—Ç–æ—à–Ω–∏—Ç –∫–∞–∫ –ø–æ—Å–ª–µ –ø–æ–º–æ–π–∫–∏", "–≤ –≥–ª–∞–∑–∞—Ö –¥–≤–∞ –º–∏—Ä–∞", "–ø–æ–ª–Ω—ã–π –ø–∏–∑–¥–µ—Ü —Å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ–º"]
    }
}


def get_drinking_cooldown_key(user_id: int, chat_id: int) -> str:
    return f"drink_{user_id}_{chat_id}"


def check_drinking_cooldown(user_id: int, chat_id: int) -> Optional[float]:
    cooldowns = load_cooldowns()
    key = get_drinking_cooldown_key(user_id, chat_id)
    
    if key not in cooldowns:
        return None
    
    last_drink = cooldowns[key].get("last_session", 0)
    current_time = time.time()
    time_passed = current_time - last_drink
    
    if time_passed >= DRINKING_COOLDOWN:
        return None
    
    return DRINKING_COOLDOWN - time_passed


def set_drinking_cooldown(user_id: int, chat_id: int) -> None:
    cooldowns = load_cooldowns()
    key = get_drinking_cooldown_key(user_id, chat_id)
    
    if key not in cooldowns:
        cooldowns[key] = {}
    
    cooldowns[key]["last_session"] = time.time()
    save_cooldowns(cooldowns)


def format_time_remaining(seconds: float) -> str:
    minutes = int(seconds // 60)
    if minutes > 0:
        return f"{minutes} –º–∏–Ω."
    else:
        return f"{int(seconds)} —Å–µ–∫."


def create_drink_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    buttons = []
    row = []
    
    for drink_id, drink_info in DRINKS.items():
        button = InlineKeyboardButton(
            f"{drink_info['emoji']} {drink_info['name']}", 
            callback_data=f"drink:{user_id}:{drink_id}:1"
        )
        row.append(button)
        
        if len(row) == 2:
            buttons.append(row)
            row = []
    
    if row:
        buttons.append(row)
    
    return InlineKeyboardMarkup(buttons)


def create_continue_keyboard(user_id: int, drink_type: str, level: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∏—Ç—å—è"""
    if level >= MAX_DRINKS:
        return InlineKeyboardMarkup([])
    
    drink_info = DRINKS.get(drink_type, DRINKS["cognac"])
    button = InlineKeyboardButton(
        f"üçª –í—ã–ø–∏—Ç—å –µ—â–µ {drink_info['name']}?", 
        callback_data=f"drink:{user_id}:{drink_type}:{level + 1}"
    )
    
    return InlineKeyboardMarkup([[button]])


def parse_html_segments(text: str) -> List[Dict[str, Any]]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    segments = []
    current_pos = 0
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ç–µ–≥–∏
    tag_pattern = r'<(/?)([bi])>'
    matches = list(re.finditer(tag_pattern, text))
    
    for match in matches:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–≥–∞
        if match.start() > current_pos:
            plain_text = text[current_pos:match.start()]
            if plain_text:
                segments.append({
                    'type': 'text',
                    'content': plain_text,
                    'formatting': []
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
        is_closing = match.group(1) == '/'
        tag_type = match.group(2)
        segments.append({
            'type': 'tag',
            'tag_type': tag_type,
            'is_closing': is_closing,
            'content': match.group(0)
        })
        
        current_pos = match.end()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if current_pos < len(text):
        remaining_text = text[current_pos:]
        if remaining_text:
            segments.append({
                'type': 'text',
                'content': remaining_text,
                'formatting': []
            })
    
    return segments


def apply_drunk_effect_to_text(text: str, level: int) -> str:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—å—è–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫ —Ç–µ–∫—Å—Ç—É (–±–µ–∑ HTML)"""
    if level < 3:
        return text
    
    drunk_text = text
    
    if level >= 3:
        # –ó–∞–º–µ–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—É–∫–≤
        replacements = {
            '—Å': '—à', '–∑': '–∂', '—Ç': '—Ü', '–ø': '–±'
        }
        for old, new in replacements.items():
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å –∑–∞–º–µ–Ω—ã
                drunk_text = drunk_text.replace(old, new)
    
    if level >= 4:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –±—É–∫–≤
        words = drunk_text.split()
        for i, word in enumerate(words):
            if random.random() < 0.4 and len(word) > 3:
                # –£–¥–≤–∞–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É
                pos = random.randint(1, len(word) - 1)
                words[i] = word[:pos] + word[pos] + word[pos:]
        drunk_text = ' '.join(words)
    
    if level >= 4:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–∂–¥–æ–º–µ—Ç–∏–π –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (—Ä–µ–∂–µ –∏ –≤ –∫—É—Ä—Å–∏–≤–µ)
        interjections = ['—Ö–∏–∫', '—É—É—É—Ö', '–±–ª–∏–Ω', '–æ–π', '—ç—ç—ç']
        if random.random() < 0.25:  # –¢–æ–ª—å–∫–æ 25% —à–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–∂–¥–æ–º–µ—Ç–∏—è
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
            words = drunk_text.split(' ')
            if len(words) > 1:  # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
                insert_pos = random.randint(1, len(words) - 1)
                # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ–∂–¥–æ–º–µ—Ç–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                interjection = f"<i>{random.choice(interjections)}</i>"
                words.insert(insert_pos, interjection)
                drunk_text = ' '.join(words)
    
    if level >= 5:
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ - –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        drunk_text = drunk_text.replace('–æ', '–∞').replace('–µ', '–∏')
        if random.random() < 0.3:  # –£–º–µ–Ω—å—à–∏–ª–∏ —à–∞–Ω—Å —Å 50% –¥–æ 30%
            drunk_text += " <i>–∏–∫–∞–µ—Ç</i>"
    
    return drunk_text


def reconstruct_html_text(segments: List[Dict[str, Any]], level: int) -> str:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTML —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –æ–ø—å—è–Ω–µ–Ω–∏—è"""
    result = ""
    
    for segment in segments:
        if segment['type'] == 'text':
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—å—è–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
            processed_text = apply_drunk_effect_to_text(segment['content'], level)
            result += processed_text
        elif segment['type'] == 'tag':
            # HTML —Ç–µ–≥–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            result += segment['content']
    
    return result


def validate_html_tags(text: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å HTML —Ç–µ–≥–∏"""
    # –°—Ç–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
    tag_stack = []
    result = ""
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏
    tag_pattern = r'<(/?)([bi])>'
    last_pos = 0
    
    for match in re.finditer(tag_pattern, text):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–≥–∞
        result += text[last_pos:match.start()]
        
        is_closing = match.group(1) == '/'
        tag_type = match.group(2)
        
        if is_closing:
            # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
            if tag_stack and tag_stack[-1] == tag_type:
                tag_stack.pop()
                result += match.group(0)
            # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç–∫—Ä—ã—Ç–æ–º—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        else:
            # –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
            tag_stack.append(tag_type)
            result += match.group(0)
        
        last_pos = match.end()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    result += text[last_pos:]
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
    while tag_stack:
        tag = tag_stack.pop()
        result += f"</{tag}>"
    
    return result


def apply_drunk_effect(text: str, level: int, drink_type: str) -> str:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—å—è–Ω–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º HTML"""
    if level < 3:
        return text
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        segments = parse_html_segments(text)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        result = reconstruct_html_text(segments, level)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º HTML —Ç–µ–≥–∏
        result = validate_html_tags(result)
        
        return result
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        print(f"Error in apply_drunk_effect: {e}")
        return text


async def cmd_drink(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–≤—ã–ø–∏—Ç—å"""
    message = update.message
    if not message or not update.effective_user:
        return
    
    user = update.effective_user
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    remaining_time = check_drinking_cooldown(user.id, chat_id)
    if remaining_time is not None:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except Exception as e:
            print(f"Failed to delete user message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_msg = await context.bot.send_message(
            chat_id,
            f"üö´ <b>–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ç—Ä–µ–∑–≤–µ–ª–∏!</b>\n\n"
            f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {format_time_remaining(remaining_time)}\n"
            f"üí° <i>–ù—É–∂–Ω–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è...</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        async def delete_warning(context):
            try:
                await context.bot.delete_message(chat_id, warning_msg.message_id)
            except Exception as e:
                print(f"Failed to delete warning message: {e}")
        
        context.job_queue.run_once(delete_warning, 3)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø–∏—Ç–∫–æ–≤
    keyboard = create_drink_keyboard(user.id)
    
    await message.reply_text(
        DRUNK_MESSAGES[0]["text"],
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


async def cb_drink(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –ø–∏—Ç—å—è"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, user_id_str, drink_type, level_str = query.data.split(":")
        user_id = int(user_id_str)
        level = int(level_str)
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if query.from_user.id != user_id:
        await query.answer("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à –Ω–∞–ø–∏—Ç–æ–∫!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if level > MAX_DRINKS:
        await query.answer("ü§¢ –•–≤–∞—Ç–∏—Ç! –í—ã —É–∂–µ –≤—ã–ø–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–∏—Ç–∫–µ
    drink_info = DRINKS.get(drink_type, DRINKS["cognac"])
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—å—è–Ω–µ–Ω–∏–∏
    base_message = DRUNK_MESSAGES[level]["text"]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—å—è–Ω–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É (–Ω–∞—á–∏–Ω–∞—è —Å 3-–≥–æ —É—Ä–æ–≤–Ω—è)
    drunk_message = apply_drunk_effect(base_message, level, drink_type)
    
    full_message = drunk_message 
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç)
    keyboard = create_continue_keyboard(user_id, drink_type, level)
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    if level >= MAX_DRINKS:
        set_drinking_cooldown(user_id, query.message.chat.id)
        full_message += f"\n\nüö´ <b>–í—Å—ë, —Ö–≤–∞—Ç–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!</b>\n‚è∞ <i>–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø–æ–π–∫–∞ —á–µ—Ä–µ–∑ {DRINKING_COOLDOWN // 60} –º–∏–Ω—É—Ç</i>"
    
    try:
        await query.edit_message_text(
            full_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safe_message = re.sub(r'<[^>]+>', '', full_message)
            await query.edit_message_text(
                safe_message,
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            safe_message = re.sub(r'<[^>]+>', '', full_message)
            await query.message.reply_text(
                safe_message,
                reply_markup=keyboard
            )
