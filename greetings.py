"""–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π."""
import asyncio
import logging
import base64
import tempfile
import os
from datetime import time as dtime
from typing import Literal
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, Application
from g4f.client import Client as G4FClient

from utils import build_caption, parse_time_hhmm
from generate_image import FusionBrainAPI

logger = logging.getLogger(__name__)
g4f_client = G4FClient()

fusion_api = FusionBrainAPI(
    'https://api-key.fusionbrain.ai/',
    '9154F36CA2E78090F7772F11A6BEA9C3',
    'C5C0BA88525F433CF1817485DA5E1511'
)

def _gen_text_sync(kind: Literal["morning", "evening"]) -> str:
    if kind == "morning":
        user_prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ, —Ç—ë–ø–ª–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —á–∞—Ç–∞ –í–æ–ª–∫–∏ –≤—É–∑–∞ –ú–ò–†–≠–ê "
            "(1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ò–∑–±–µ–≥–∞–π —Ö—ç—à—Ç–µ–≥–æ–≤. –†–∞–∑—Ä–µ—à–µ–Ω–æ 1 —É–º–µ—Å—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏. "
            "–°—Ç–∏–ª—å ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π."
        )
        model = "gpt-4o-mini"
    else:
        user_prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ, —Ç—ë–ø–ª–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —á–∞—Ç–∞ –í–æ–ª–∫–∏ –≤—É–∑–∞ –ú–ò–†–≠–ê"
            "(1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ò–∑–±–µ–≥–∞–π —Ö—ç—à—Ç–µ–≥–æ–≤. –†–∞–∑—Ä–µ—à–µ–Ω–æ 1 —É–º–µ—Å—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏. "
            "–°—Ç–∏–ª—å ‚Äî —É—é—Ç–Ω—ã–π, –Ω–µ–∂–Ω—ã–π, —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π."
        )
        model = "gpt-4o-mini"

    resp = g4f_client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≤–µ—Å–µ–ª—ã–π –∞–≤—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—ë–ø–ª—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π."},
            {"role": "user", "content": user_prompt},
        ],
    )
    content = resp.choices[0].message.content
    return str(content).strip()


def _gen_image_sync(kind: Literal["morning", "evening"]) -> str:
    """FusionBrain API"""
    try:
        if kind == "morning":
            image_prompt = (
                "–ú–∏–ª—ã–π –ø—É—à–∏—Å—Ç—ã–π –∫–æ—Ç—ë–Ω–æ–∫ —É—Ç—Ä–æ–º, –º—è–≥–∫–∏–π —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç, —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏, —É—é—Ç, "
                "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –¥–µ—Ç–∞–ª—å–Ω–∞—è —à–µ—Ä—Å—Ç—å, 4k, warm tones"
            )
        else:
            image_prompt = (
                "–ú–∏–ª—ã–π –∫–æ—Ç—ë–Ω–æ–∫ —Å–ø–æ–∫–æ–π–Ω–æ —Å–ø–∏—Ç –ø–æ–¥ –ø–ª–µ–¥–æ–º, –ª—É–Ω–Ω—ã–π —Å–≤–µ—Ç –∏–∑ –æ–∫–Ω–∞, –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏, "
                "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, 4k, night, dreamy"
            )

        pipeline_id = fusion_api.get_pipeline()
        if not pipeline_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline ID")
            return ""

        uuid = fusion_api.generate(image_prompt, pipeline_id)
        if not uuid:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            return ""

        files = fusion_api.check_generation(uuid, attempts=15, delay=8)
        if not files:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return ""

        # base64 –≤ —Ñ–∞–π–ª
        image_base64 = files[0]
        image_data = base64.b64decode(image_base64)
        
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        temp_file.write(image_data)
        temp_file.close()
        
        return temp_file.name

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", e)
        return ""


async def generate_text(kind: Literal["morning", "evening"]) -> str:
    try:
        return await asyncio.to_thread(_gen_text_sync, kind)
    except Exception as e:
        logger.exception("Text generation failed: %s", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ"


async def generate_image_path(kind: Literal["morning", "evening"]) -> str:
    try:
        return await asyncio.to_thread(_gen_image_sync, kind)
    except Exception as e:
        logger.exception("Image generation failed: %s", e)
        return ""


async def send_greeting(context: ContextTypes.DEFAULT_TYPE) -> None:
    kind: Literal["morning", "evening"] = context.job.data["kind"]
    chat_id: int = context.job.data["chat_id"]
    text = await generate_text(kind)
    image_path = await generate_image_path(kind)
    
    try:
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=build_caption(kind, text),
                    parse_mode=ParseMode.HTML,
                )
            os.unlink(image_path)
        else:
            raise RuntimeError("no image file")
    except Exception as e:
        logger.error("Failed to send image, sending text only: %s", e)
        await context.bot.send_message(
            chat_id=chat_id,
            text=build_caption(kind, text + "\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"),
            parse_mode=ParseMode.HTML,
        )
        if image_path and os.path.exists(image_path):
            os.unlink(image_path)


def schedule_for_chat(app: Application, chat_id: int, settings) -> None:
    if getattr(app, "job_queue", None) is None:
        logger.error('pip install "python-telegram-bot[job-queue]"')
        return

    for name in (f"morning_{chat_id}", f"evening_{chat_id}"):
        for job in app.job_queue.get_jobs_by_name(name):
            job.schedule_removal()

    tz = ZoneInfo(settings.tz)
    t_morning = parse_time_hhmm(settings.morning)
    t_evening = parse_time_hhmm(settings.evening)

    if t_morning:
        app.job_queue.run_daily(
            send_greeting,
            time=dtime(hour=t_morning.hour, minute=t_morning.minute, tzinfo=tz),
            name=f"morning_{chat_id}",
            data={"kind": "morning", "chat_id": chat_id},
            chat_id=chat_id,
        )

    if t_evening:
        app.job_queue.run_daily(
            send_greeting,
            time=dtime(hour=t_evening.hour, minute=t_evening.minute, tzinfo=tz),
            name=f"evening_{chat_id}",
            data={"kind": "evening", "chat_id": chat_id},
            chat_id=chat_id,
        )

    logger.info("Scheduled chat %s -> morning=%s, evening=%s, tz=%s",
                chat_id, settings.morning, settings.evening, settings.tz)


async def preview_greeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    from admin import ensure_admin
    
    if not await ensure_admin(update):
        return
    if update.effective_chat is None:
        return
    chat_id = update.effective_chat.id
    arg = (context.args[0].lower() if context.args else "morning")
    kind: Literal["morning", "evening"] = "morning" if arg not in ("evening", "night", "–≤–µ—á–µ—Ä") else "evening"

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø–æ—Å—Ç... ‚òïÔ∏èüêæ" if kind == "morning" else "–ì–æ—Ç–æ–≤–ª—é —É—é—Ç–Ω—ã–π –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç... üåôüêæ"
    )
    text = await generate_text(kind)
    image_path = await generate_image_path(kind)
    
    try:
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=build_caption(kind, text),
                    parse_mode=ParseMode.HTML,
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(image_path)
        else:
            raise RuntimeError("no image file")
    except Exception as e:
        logger.error("Preview failed: %s", e)
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if image_path and os.path.exists(image_path):
            os.unlink(image_path)
