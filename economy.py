"""–°–∏—Å—Ç–µ–º–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –±–æ—Ç–∞."""
import json
import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes
from pathlib import Path
from config import DATA_DIR
from admin import ensure_admin, extract_target_user_id_from_message
from utils import safe_html, profile_link_html

logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
ECONOMY_FILE = DATA_DIR / "economy.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏
DEFAULT_BALANCE = 0
CURRENCY_NAME = "–º–æ–Ω–µ—Ç"
CURRENCY_SYMBOL = "ü™ô"


def load_economy() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏."""
    if not ECONOMY_FILE.exists():
        return {"balances": {}, "slaves": {}, "usernames": {}}
    try:
        with open(ECONOMY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f) or {}
            data.setdefault("balances", {})
            data.setdefault("slaves", {})
            data.setdefault("usernames", {})
            return data
    except Exception as e:
        logger.error("Failed to read economy data: %s", e)
        return {"balances": {}, "slaves": {}, "usernames": {}}


def save_economy(data: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏."""
    try:
        with open(ECONOMY_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error("Failed to write economy data: %s", e)


def get_user_balance(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_economy()
    return data["balances"].get(str(user_id), DEFAULT_BALANCE)


def set_user_balance(user_id: int, amount: int) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_economy()
    data["balances"][str(user_id)] = amount
    save_economy(data)


def add_user_balance(user_id: int, amount: int) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å."""
    current_balance = get_user_balance(user_id)
    new_balance = current_balance + amount
    set_user_balance(user_id, new_balance)
    return new_balance


def format_balance(amount: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return f"{amount} {CURRENCY_SYMBOL}"


def calculate_total_wealth(balance: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    life_value = 1000  # –ó–∞ –∂–∏–∑–Ω—å
    bonus_percentage = 0.30  # 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    total = balance + life_value + (balance * bonus_percentage)
    return round(total, 2)


def save_user_username(user_id: int, username: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ username -> user_id –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤."""
    if not username:
        return
    
    data = load_economy()
    if "usernames" not in data:
        data["usernames"] = {}
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.lstrip('@').lower()
    data["usernames"][clean_username] = user_id
    save_economy(data)


def get_user_slave(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_economy()
    return data["slaves"].get(str(user_id))


def set_user_slave(owner_id: int, slave_id: int, purchase_price: int, slave_name: str) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_economy()
    data["slaves"][str(owner_id)] = {
        "slave_id": slave_id,
        "purchase_price": purchase_price,
        "slave_name": slave_name
    }
    save_economy(data)


def remove_user_slave(owner_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞–±–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_economy()
    if str(owner_id) in data["slaves"]:
        del data["slaves"][str(owner_id)]
        save_economy(data)


def get_slave_owner(slave_id: int) -> Optional[int]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–∞–±–∞."""
    data = load_economy()
    for owner_id, slave_info in data["slaves"].items():
        if slave_info["slave_id"] == slave_id:
            return int(owner_id)
    return None


def can_buy_slave(buyer_id: int, target_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏—Ç—å —Ä–∞–±–∞."""
    # –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if buyer_id == target_id:
        return False, "‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ —Ä–∞–±—Å—Ç–≤–æ!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–± —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    if get_user_slave(buyer_id):
        return False, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±! –ú–∞–∫—Å–∏–º—É–º 1 —Ä–∞–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å —É–∂–µ —á—å–∏–º-—Ç–æ —Ä–∞–±–æ–º
    if get_slave_owner(target_id):
        return False, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á—å–∏–º-—Ç–æ —Ä–∞–±–æ–º!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    buyer_balance = get_user_balance(buyer_id)
    target_wealth = calculate_total_wealth(get_user_balance(target_id))
    
    if buyer_balance < target_wealth:
        return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {target_wealth} {CURRENCY_SYMBOL}, —É –≤–∞—Å {buyer_balance} {CURRENCY_SYMBOL}"
    
    return True, ""


async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–±–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.effective_user or not update.message:
        return
    
    if update.effective_user.username:
        save_user_username(update.effective_user.id, update.effective_user.username)
    
    target_id = None
    user_name = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        target_id = update.message.reply_to_message.from_user.id
        target_user = update.message.reply_to_message.from_user
        user_name = target_user.first_name or target_user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
        if target_user.username:
            save_user_username(target_id, target_user.username)
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    elif update.message.entities:
        for entity in update.message.entities:
            if entity.type == "text_mention" and entity.user:
                target_id = entity.user.id
                user_name = entity.user.first_name or entity.user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
                if entity.user.username:
                    save_user_username(target_id, entity.user.username)
                break
            elif entity.type == "mention":
                start = entity.offset
                length = entity.length
                username = update.message.text[start+1:start + length]  # +1 —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å @
                user_name = f"@{username}"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                user_found = False
                
                # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ get_chat (—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º)
                try:
                    chat = await context.bot.get_chat(f"@{username}")
                    if chat and chat.id:
                        target_id = chat.id
                        user_name = chat.first_name or f"@{username}"
                        user_found = True
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
                        save_user_username(target_id, username)
                except Exception:
                    pass
                
                # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ get_chat_member
                if not user_found and update.effective_chat and update.effective_chat.type in ['group', 'supergroup']:
                    try:
                        chat_member = await context.bot.get_chat_member(update.effective_chat.id, f"@{username}")
                        if chat_member and chat_member.user:
                            target_id = chat_member.user.id
                            user_name = chat_member.user.first_name or f"@{username}"
                            user_found = True
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
                            if chat_member.user.username:
                                save_user_username(target_id, chat_member.user.username)
                    except Exception:
                        pass
                
                # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏ –ø–æ username
                if not user_found:
                    data = load_economy()
                    usernames = data.get("usernames", {})
                    if username in usernames:
                        target_id = usernames[username]
                        user_name = f"@{username}"
                        user_found = True
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                if not user_found:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.\n"
                        "–ü—Ä–∏—á–∏–Ω–∞:\n"
                        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
                    return
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (—á–∏—Å–ª–æ–≤–æ–π ID)
    elif context.args and len(context.args) > 0:
        try:
            target_id = int(context.args[0])
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}"
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
    
    # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not target_id:
        target_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    balance = get_user_balance(target_id)
    total_wealth = calculate_total_wealth(balance)
    slave_info = get_user_slave(target_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ–º
    owner_id = get_slave_owner(target_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±—Å—Ç–≤–∞
    slave_display = "–Ω–∏—á–µ–≥–æ"
    slavery_note = ""
    
    if owner_id:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ–º
        owner_slave_info = get_user_slave(owner_id)
        if owner_slave_info and owner_slave_info["slave_id"] == target_id:
            purchase_price = owner_slave_info["purchase_price"]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ username –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            data = load_economy()
            owner_username = None
            for username, user_id in data.get("usernames", {}).items():
                if user_id == owner_id:
                    owner_username = username
                    break
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner_link = profile_link_html(owner_id, f"–í–ª–∞–¥–µ–ª–µ—Ü {owner_id}", owner_username)
            slave_display = f"–•–æ–∑—è–∏–Ω: {owner_link}"
            slavery_note = f"\n\n‚õìÔ∏è <b>–°—Ç–∞—Ç—É—Å —Ä–∞–±—Å—Ç–≤–∞:</b>\nüí∞ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {format_balance(purchase_price)}\nüìù <i>–ü–æ–∫–∞ –≤—ã —Ä–∞–±, —É –≤–∞—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–±–æ–≤</i>"
    elif slave_info:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–∞–±–∞
        slave_id = slave_info["slave_id"]
        slave_name = slave_info["slave_name"]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ username —Ä–∞–±–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        data = load_economy()
        slave_username = None
        for username, user_id in data.get("usernames", {}).items():
            if user_id == slave_id:
                slave_username = username
                break
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–∞
        slave_link = profile_link_html(slave_id, slave_name, slave_username)
        slave_display = f"{slave_link} - —Ä–∞–±"
    
    message = (
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å {safe_html(user_name)}</b>\n\n"
        f"üíµ –î–µ–Ω—å–≥–∏: {format_balance(balance)}\n"
        f"üíé –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {total_wealth} {CURRENCY_SYMBOL}\n\n"
        f"üë• <b>–í—ã –∏–º–µ–µ—Ç–µ:</b>\n"
        f"üìù {slave_display}"
        f"{slavery_note}"
    )
    
    await update.message.reply_text(message, parse_mode="HTML", disable_web_page_preview=True)


async def cmd_give_coins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not await ensure_admin(update):
        return
    
    if not update.message:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = extract_target_user_id_from_message(update.message)
    if not target_id:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É:\n"
            "/give_coins <—Å—É–º–º–∞> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "–∏–ª–∏ /give_coins <user_id> <—Å—É–º–º–∞>"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = (update.message.text or "").strip().split()
    if len(parts) < 2:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏.")
        return
    
    try:
        if len(parts) >= 3 and parts[1].isdigit():
            # –§–æ—Ä–º–∞—Ç: /give_coins <user_id> <amount>
            amount = int(parts[2])
        else:
            # –§–æ—Ä–º–∞—Ç: /give_coins <amount> (—Å reply/mention)
            amount = int(parts[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    if amount <= 0:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    
    # –í—ã–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã
    old_balance = get_user_balance(target_id)
    new_balance = add_user_balance(target_id, amount)
    
    await update.message.reply_text(
        f"‚úÖ –í—ã–¥–∞–Ω–æ {format_balance(amount)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}\n"
        f"–ë–∞–ª–∞–Ω—Å: {format_balance(old_balance)} ‚Üí {format_balance(new_balance)}"
    )


async def cmd_take_coins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not await ensure_admin(update):
        return
    
    if not update.message:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = extract_target_user_id_from_message(update.message)
    if not target_id:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É:\n"
            "/take_coins <—Å—É–º–º–∞> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "–∏–ª–∏ /take_coins <user_id> <—Å—É–º–º–∞>"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = (update.message.text or "").strip().split()
    if len(parts) < 2:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è.")
        return
    
    try:
        if len(parts) >= 3 and parts[1].isdigit():
            # –§–æ—Ä–º–∞—Ç: /take_coins <user_id> <amount>
            amount = int(parts[2])
        else:
            # –§–æ—Ä–º–∞—Ç: /take_coins <amount> (—Å reply/mention)
            amount = int(parts[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    if amount <= 0:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    
    # –°–Ω–∏–º–∞–µ–º –º–æ–Ω–µ—Ç—ã
    old_balance = get_user_balance(target_id)
    new_balance = add_user_balance(target_id, -amount)
    
    await update.message.reply_text(
        f"‚úÖ –°–Ω—è—Ç–æ {format_balance(amount)} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}\n"
        f"–ë–∞–ª–∞–Ω—Å: {format_balance(old_balance)} ‚Üí {format_balance(new_balance)}"
    )


async def cmd_set_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not await ensure_admin(update):
        return
    
    if not update.message:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = extract_target_user_id_from_message(update.message)
    if not target_id:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É:\n"
            "/set_balance <—Å—É–º–º–∞> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "–∏–ª–∏ /set_balance <user_id> <—Å—É–º–º–∞>"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = (update.message.text or "").strip().split()
    if len(parts) < 2:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.")
        return
    
    try:
        if len(parts) >= 3 and parts[1].isdigit():
            # –§–æ—Ä–º–∞—Ç: /set_balance <user_id> <amount>
            amount = int(parts[2])
        else:
            # –§–æ—Ä–º–∞—Ç: /set_balance <amount> (—Å reply/mention)
            amount = int(parts[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    if amount < 0:
        await update.message.reply_text("–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    old_balance = get_user_balance(target_id)
    set_user_balance(target_id, amount)
    
    await update.message.reply_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å {format_balance(amount)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}\n"
        f"–ë—ã–ª–æ: {format_balance(old_balance)}"
    )


async def cmd_buy_slave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞."""
    if not update.effective_user or not update.message:
        return
    
    buyer_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = extract_target_user_id_from_message(update.message)
    if not target_id:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É:\n"
            "/buy_slave <—Å—É–º–º–∞> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "–∏–ª–∏ /buy_slave <user_id> <—Å—É–º–º–∞>"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = (update.message.text or "").strip().split()
    if len(parts) < 2:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞.")
        return
    
    try:
        if len(parts) >= 3 and parts[1].isdigit():
            # –§–æ—Ä–º–∞—Ç: /buy_slave <user_id> <amount>
            amount = int(parts[2])
        else:
            # –§–æ—Ä–º–∞—Ç: /buy_slave <amount> (—Å reply/mention)
            amount = int(parts[1])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    if amount <= 0:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞
    can_buy, reason = can_buy_slave(buyer_id, target_id)
    if not can_buy:
        await update.message.reply_text(reason)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–∞
    set_user_slave(buyer_id, target_id, amount, "–†–∞–±")
    
    # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    add_user_balance(buyer_id, -amount)
    
    await update.message.reply_text(
        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–±–∞ –∑–∞ {format_balance(amount)}!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}"
    )


async def cmd_free_slave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–∞–±–∞."""
    if not await ensure_admin(update):
        return
    
    if not update.message:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–∞–±–∞
    owner_id = extract_target_user_id_from_message(update.message)
    if not owner_id:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–∞–±–∞:\n"
            "/free_slave (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "–∏–ª–∏ /free_slave <owner_id>"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Ä–∞–±–∞
    remove_user_slave(owner_id)
    
    await update.message.reply_text(
        f"‚úÖ –†–∞–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner_id} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω."
    )


async def cmd_slave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /—Ä–∞–± - –ø–æ–∫—É–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–±—Å—Ç–≤–æ."""
    if not update.effective_user or not update.message:
        return
    
    buyer_id = update.effective_user.id
    
    if update.effective_user.username:
        save_user_username(update.effective_user.id, update.effective_user.username)
    
    target_id = None
    target_name = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        target_id = update.message.reply_to_message.from_user.id
        target_user = update.message.reply_to_message.from_user
        target_name = target_user.first_name or target_user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
        if target_user.username:
            save_user_username(target_id, target_user.username)
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    elif update.message.entities:
        for entity in update.message.entities:
            if entity.type == "text_mention" and entity.user:
                target_id = entity.user.id
                target_name = entity.user.first_name or entity.user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
                if entity.user.username:
                    save_user_username(target_id, entity.user.username)
                break
            elif entity.type == "mention":
                start = entity.offset
                length = entity.length
                username = update.message.text[start+1:start + length]  # +1 —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å @
                target_name = f"@{username}"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                user_found = False
                
                # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ get_chat (—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º)
                try:
                    chat = await context.bot.get_chat(f"@{username}")
                    if chat and chat.id:
                        target_id = chat.id
                        target_name = chat.first_name or f"@{username}"
                        user_found = True
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
                        save_user_username(target_id, username)
                except Exception:
                    pass
                
                # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ get_chat_member
                if not user_found and update.effective_chat and update.effective_chat.type in ['group', 'supergroup']:
                    try:
                        chat_member = await context.bot.get_chat_member(update.effective_chat.id, f"@{username}")
                        if chat_member and chat_member.user:
                            target_id = chat_member.user.id
                            target_name = chat_member.user.first_name or f"@{username}"
                            user_found = True
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
                            if chat_member.user.username:
                                save_user_username(target_id, chat_member.user.username)
                    except Exception:
                        pass
                
                # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏ –ø–æ username
                if not user_found:
                    data = load_economy()
                    usernames = data.get("usernames", {})
                    if username in usernames:
                        target_id = usernames[username]
                        target_name = f"@{username}"
                        user_found = True
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                if not user_found:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.\n"
                        "–ü—Ä–∏—á–∏–Ω–∞:\n"
                        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
                    return
                break
    
    # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not target_id:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ —Ä–∞–±—Å—Ç–≤–æ:\n"
            "‚Ä¢ /—Ä–∞–± @username\n"
            "‚Ä¢ /—Ä–∞–± (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞
    can_buy, reason = can_buy_slave(buyer_id, target_id)
    if not can_buy:
        await update.message.reply_text(reason)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ª–∏)
    target_balance = get_user_balance(target_id)
    purchase_price = int(calculate_total_wealth(target_balance))
    
    set_user_slave(buyer_id, target_id, purchase_price, target_name)
    add_user_balance(buyer_id, -purchase_price)
    
    buyer_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    await update.message.reply_text(
        f"üîó <b>–ü–æ–∫—É–ø–∫–∞ –≤ —Ä–∞–±—Å—Ç–≤–æ!</b>\n\n"
        f"üë§ <b>{safe_html(buyer_name)}</b> –∫—É–ø–∏–ª –≤ —Ä–∞–±—Å—Ç–≤–æ <b>{safe_html(target_name)}</b>\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_balance(purchase_price)}\n\n"
        f"üìã <b>–£—Å–ª–æ–≤–∏—è –≤—ã–∫—É–ø–∞:</b>\n"
        f"üíµ {safe_html(target_name)} –º–æ–∂–µ—Ç –≤—ã–∫—É–ø–∏—Ç—å —Å–µ–±—è –∑–∞ {format_balance(purchase_price)}\n"
        f"‚è∞ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


async def cmd_buyout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–≤—ã–∫—É–ø - —Ä–∞–± –≤—ã–∫—É–ø–∞–µ—Ç —Å–µ–±—è –∏–∑ —Ä–∞–±—Å—Ç–≤–∞."""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ–º
    owner_id = get_slave_owner(user_id)
    if not owner_id:
        await update.message.reply_text(
            "‚ùå <b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–∞–±–æ–º!</b>\n\n"
            "üí° –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±—Å—Ç–≤–µ.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±—Å—Ç–≤–µ
    slave_info = get_user_slave(owner_id)
    if not slave_info or slave_info["slave_id"] != user_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    purchase_price = slave_info["purchase_price"]
    user_balance = get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥ –¥–ª—è –≤—ã–∫—É–ø–∞
    if user_balance < purchase_price:
        await update.message.reply_text(
            f"üí∞ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–∫—É–ø–∞!</b>\n\n"
            f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(user_balance)}\n"
            f"üíé –ù—É–∂–Ω–æ –¥–ª—è –≤—ã–∫—É–ø–∞: {format_balance(purchase_price)}\n"
            f"üìà –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {format_balance(purchase_price - user_balance)}\n\n"
            f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—É–º–º—É!",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    # –í—ã–∫—É–ø–∞–µ–º —Ä–∞–±–∞
    add_user_balance(user_id, -purchase_price)
    remove_user_slave(owner_id)
    
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–∫—É–ø–µ
    await update.message.reply_text(
        f"üéâ <b>–°–í–û–ë–û–î–ê!</b>\n\n"
        f"‚úÖ <b>{safe_html(user_name)}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–∏–ª–∏ —Å–µ–±—è –∏–∑ —Ä–∞–±—Å—Ç–≤–∞!\n"
        f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_balance(purchase_price)}\n"
        f"üíµ –û—Å—Ç–∞—Ç–æ–∫: {format_balance(get_user_balance(user_id))}\n\n"
        f"üïäÔ∏è <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Å–≤–æ–±–æ–¥—ã!</i>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –ø–æ—Ç–µ—Ä–µ —Ä–∞–±–∞
    try:
        await context.bot.send_message(
            chat_id=owner_id,
            text=f"üíî <b>–í–∞—à —Ä–∞–± –≤—ã–∫—É–ø–∏–ª —Å–≤–æ–±–æ–¥—É!</b>\n\n"
                 f"üë§ <b>{safe_html(user_name)}</b> –≤—ã–∫—É–ø–∏–ª —Å–µ–±—è –∏–∑ —Ä–∞–±—Å—Ç–≤–∞\n"
                 f"üí∞ –ó–∞ —Å—É–º–º—É: {format_balance(purchase_price)}\n\n"
                 f"üîç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–∞!",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass


async def cmd_slave_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–∏–Ω—Ñ–æ_—Ä–∞–± - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±
    slave_info = get_user_slave(user_id)
    if slave_info:
        slave_id = slave_info["slave_id"]
        slave_name = slave_info["slave_name"]
        purchase_price = slave_info["purchase_price"]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ username —Ä–∞–±–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        data = load_economy()
        slave_username = None
        for username, uid in data.get("usernames", {}).items():
            if uid == slave_id:
                slave_username = username
                break
        
        slave_link = profile_link_html(slave_id, slave_name, slave_username)
        
        await update.message.reply_text(
            f"üëë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ä–∞–±–µ:</b>\n\n"
            f"üë§ –†–∞–±: {slave_link}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏: {format_balance(purchase_price)}\n"
            f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–±–∞: {format_balance(get_user_balance(slave_id))}\n\n"
            f"üìã <b>–£—Å–ª–æ–≤–∏—è –≤—ã–∫—É–ø–∞:</b>\n"
            f"üíé –†–∞–± –º–æ–∂–µ—Ç –≤—ã–∫—É–ø–∏—Ç—å —Å–µ–±—è –∑–∞ {format_balance(purchase_price)}\n"
            f"‚ö†Ô∏è –ï—Å–ª–∏ —É —Ä–∞–±–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –æ–Ω —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /–≤—ã–∫—É–ø",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ–º
    owner_id = get_slave_owner(user_id)
    if owner_id:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
        owner_slave_info = get_user_slave(owner_id)
        if owner_slave_info and owner_slave_info["slave_id"] == user_id:
            purchase_price = owner_slave_info["purchase_price"]
            user_balance = get_user_balance(user_id)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            data = load_economy()
            owner_username = None
            for username, uid in data.get("usernames", {}).items():
                if uid == owner_id:
                    owner_username = username
                    break
            
            owner_link = profile_link_html(owner_id, f"–í–ª–∞–¥–µ–ª–µ—Ü {owner_id}", owner_username)
            
            await update.message.reply_text(
                f"‚õìÔ∏è <b>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–±—Å—Ç–≤–µ:</b>\n\n"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_link}\n"
                f"üí∞ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {format_balance(purchase_price)}\n"
                f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(user_balance)}\n"
                f"üìà –î–æ —Å–≤–æ–±–æ–¥—ã: {format_balance(max(0, purchase_price - user_balance))}\n\n"
                f"üí™ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥—É:</b>\n"
                f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ {format_balance(purchase_price)} —Å –ø–æ–º–æ—â—å—é /work\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–≤—ã–∫—É–ø –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É\n\n"
                f"üéØ {'‚úÖ –ú–æ–∂–µ—Ç–µ –≤—ã–∫—É–ø–∏—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!' if user_balance >= purchase_price else '‚ùå –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–∫—É–ø–∞'}",
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–±–æ–¥–µ–Ω
    await update.message.reply_text(
        f"üïäÔ∏è <b>–í—ã —Å–≤–æ–±–æ–¥–Ω—ã!</b>\n\n"
        f"‚úÖ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–∞–±–æ–º –∏ –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–∞–±–æ–≤\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ä–∞–± @username —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –≤ —Ä–∞–±—Å—Ç–≤–æ",
        parse_mode="HTML"
    )


async def cmd_free_slave_owner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–æ—Å–≤–æ–±–æ–¥–∏—Ç—å_—Ä–∞–±–∞ - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–∞–±–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥."""
    if not update.effective_user or not update.message:
        return
    
    owner_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±
    slave_info = get_user_slave(owner_id)
    if not slave_info:
        await update.message.reply_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–∞!</b>\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ä–∞–± @username —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –≤ —Ä–∞–±—Å—Ç–≤–æ.",
            parse_mode="HTML"
        )
        return
    
    slave_id = slave_info["slave_id"]
    slave_name = slave_info["slave_name"]
    purchase_price = slave_info["purchase_price"]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ username —Ä–∞–±–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    data = load_economy()
    slave_username = None
    for username, user_id in data.get("usernames", {}).items():
        if user_id == slave_id:
            slave_username = username
            break
    
    slave_link = profile_link_html(slave_id, slave_name, slave_username)
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–∞–±–∞
    remove_user_slave(owner_id)
    
    owner_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–∞–±–∞
    await update.message.reply_text(
        f"üïäÔ∏è <b>–†–∞–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω!</b>\n\n"
        f"‚úÖ –í—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏ {slave_link}\n"
        f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É {format_balance(purchase_price)} –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è\n\n"
        f"üîç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–∞!",
        parse_mode="HTML", 
        disable_web_page_preview=True
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ —Ä–∞–±–∞ –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏
    try:
        await context.bot.send_message(
            chat_id=slave_id,
            text=f"üéâ <b>–í–´ –°–í–û–ë–û–î–ù–´!</b>\n\n"
                 f"‚úÖ <b>{safe_html(owner_name)}</b> –æ—Å–≤–æ–±–æ–¥–∏–ª –≤–∞—Å –∏–∑ —Ä–∞–±—Å—Ç–≤–∞!\n"
                 f"üïäÔ∏è <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Å–≤–æ–±–æ–¥—ã!</i>\n\n"
                 f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Ä–∞–±–æ–≤ —Å–∞–º–∏!",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–≤—à–µ–º—É —Ä–∞–±—É, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass
