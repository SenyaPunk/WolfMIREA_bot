import secrets
import time
from typing import Dict, Any, Optional, Tuple, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatType
from telegram.ext import ContextTypes
from storage import load_marriage, save_marriage
from utils import display_name_from_user, safe_html, mention_html, format_timestamp, profile_link_html
from config import MARRY_DEEPLINK_PREFIX

MAX_FAMILY_SIZE = 5


def get_user_marriage(store: Dict[str, Any], chat_id: int, user_id: int) -> Optional[Dict[str, Any]]:
    """–ù–∞–π—Ç–∏ –±—Ä–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
    for m in store.get("marriages", []):
        if m["chat_id"] == chat_id:
            members = m.get("members", [])
            for member in members:
                if member["id"] == user_id:
                    return m
    return None


def is_user_married_in_chat(store: Dict[str, Any], chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±—Ä–∞–∫–µ –≤ —á–∞—Ç–µ"""
    return get_user_marriage(store, chat_id, user_id) is not None


def find_marriage_index(store: Dict[str, Any], chat_id: int, user_id: int) -> Optional[int]:
    """–ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –±—Ä–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for idx, m in enumerate(store.get("marriages", [])):
        if m["chat_id"] == chat_id:
            members = m.get("members", [])
            for member in members:
                if member["id"] == user_id:
                    return idx
    return None


def remove_user_from_marriage(store: Dict[str, Any], chat_id: int, user_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±—Ä–∞–∫–∞"""
    marriage_idx = find_marriage_index(store, chat_id, user_id)
    if marriage_idx is None:
        return False
    
    marriage = store["marriages"][marriage_idx]
    members = marriage.get("members", [])
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    marriage["members"] = [m for m in members if m["id"] != user_id]
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å –±—Ä–∞–∫
    if len(marriage["members"]) <= 1:
        del store["marriages"][marriage_idx]
    
    save_marriage(store)
    return True


def can_join_marriage(marriage: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±—Ä–∞–∫—É"""
    if not marriage.get("expanded", False):
        return False
    members_count = len(marriage.get("members", []))
    return members_count < MAX_FAMILY_SIZE


def get_marriage_members_text(marriage: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–∞–∫–∞"""
    members = marriage.get("members", [])
    if len(members) <= 2:
        # –û–±—ã—á–Ω—ã–π –±—Ä–∞–∫
        if len(members) == 2:
            a = profile_link_html(members[0]["id"], members[0]["name"], members[0].get("username"))
            b = profile_link_html(members[1]["id"], members[1]["name"], members[1].get("username"))
            return f"{a} üíï {b}"
    else:
        # –ü–æ–ª–∏–≥–∞–º–Ω—ã–π –±—Ä–∞–∫
        member_links = []
        for member in members:
            link = profile_link_html(member["id"], member["name"], member.get("username"))
            member_links.append(link)
        return " üíï ".join(member_links)
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞–∫"


def find_target_user_marriage(store: Dict[str, Any], chat_id: int, target_user, target_username: Optional[str]) -> Optional[Dict[str, Any]]:
    """–ù–∞–π—Ç–∏ –±—Ä–∞–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ ID –∏–ª–∏ username)"""
    if target_user:
        return get_user_marriage(store, chat_id, target_user.id)
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ username, –∏—â–µ–º –ø–æ –≤—Å–µ–º –±—Ä–∞–∫–∞–º
    if target_username:
        for marriage in store.get("marriages", []):
            if marriage["chat_id"] == chat_id:
                for member in marriage.get("members", []):
                    if member.get("username") and member["username"].lower() == target_username.lower():
                        return marriage
    
    return None


async def cmd_marry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not update.effective_chat:
        return

    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíí –ö–æ–º–∞–Ω–¥–∞ /–±—Ä–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    proposer = update.effective_user
    if not proposer:
        return

    target_user = None
    target_username = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        if message.entities:
            for ent in message.entities:
                if ent.type == "text_mention" and ent.user:
                    target_user = ent.user
                    break
                if ent.type == "mention":
                    text = message.text or ""
                    mention_text = text[ent.offset: ent.offset + ent.length]
                    target_username = mention_text.lstrip("@")

    if not target_user and not target_username:
        await message.reply_text(
            "üíï <b>–ö–æ–≥–æ –∑–≤–∞—Ç—å –≤ –±—Ä–∞–∫?</b>\n\n"
            "üìù <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</i> –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /–±—Ä–∞–∫ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –∫–∞–∫ ¬´—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ¬ª (—Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞).\n"
            "‚ö†Ô∏è –û–±—ã—á–Ω—ã–π @username –º–æ–∂–µ—Ç –Ω–µ –¥–∞—Ç—å –±–æ—Ç—É —É–∑–Ω–∞—Ç—å ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –õ–°.",
            parse_mode=ParseMode.HTML
        )
        return

    if target_user and target_user.id == proposer.id:
        await message.reply_text("üö´ <b>–ï–±–ª–∞–Ω?</b>\n\nüí° –ù–∞–π–¥–∏ —Å–µ–±–µ –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —á–∞—Ç–µ!", parse_mode=ParseMode.HTML)
        return

    store = load_marriage()
    chat_id = chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–µ–≥–æ
    proposer_marriage = get_user_marriage(store, chat_id, proposer.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ ID, —Ç–∞–∫ –∏ username)
    target_marriage = find_target_user_marriage(store, chat_id, target_user, target_username)

    # –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if proposer_marriage and target_marriage:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–¥–∏–Ω –ª–∏ —ç—Ç–æ –±—Ä–∞–∫
        proposer_idx = find_marriage_index(store, chat_id, proposer.id)
        target_idx = None
        
        if target_user:
            target_idx = find_marriage_index(store, chat_id, target_user.id)
        else:
            # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –±—Ä–∞–∫–∞ –ø–æ username
            for idx, marriage in enumerate(store.get("marriages", [])):
                if marriage["chat_id"] == chat_id:
                    for member in marriage.get("members", []):
                        if member.get("username") and member["username"].lower() == target_username.lower():
                            target_idx = idx
                            break
                    if target_idx is not None:
                        break
        
        if proposer_idx == target_idx:
            await message.reply_text(
                "üíï <b>–í—ã —É–∂–µ –≤ –æ–¥–Ω–æ–π —Å–µ–º—å–µ!</b>\n\n"
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º.",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.reply_text(
                "üíî <b>–û–±–∞ —É–∂–µ –≤ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞–∫–∞—Ö!</b>\n\n"
                "üí° –ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞–∫–∞.",
                parse_mode=ParseMode.HTML
            )
        return
    
    if proposer_marriage:
        # –ü—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–π –≤ –±—Ä–∞–∫–µ - –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ —Å–≤–æ—é —Å–µ–º—å—é
        if not can_join_marriage(proposer_marriage):
            if not proposer_marriage.get("expanded", False):
                await message.reply_text(
                    "üíî <b>–í–∞—à –±—Ä–∞–∫ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!</b>\n\n"
                    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ä–∞—Å—à–∏—Ä–∏—Ç—å —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.reply_text(
                    f"üíî <b>–°–µ–º—å—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                    f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {MAX_FAMILY_SIZE}\n"
                    f"üë• –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(proposer_marriage.get('members', []))}",
                    parse_mode=ParseMode.HTML
                )
            return
        
        if target_marriage:
            await message.reply_text(
                "üíî <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!</b>",
                parse_mode=ParseMode.HTML
            )
            return
            
        proposal_type = "invite_to_family"
        
    elif target_marriage:
        # –¶–µ–ª—å –≤ –±—Ä–∞–∫–µ - –ø—Ä–æ—Å–∏–º –ø—Ä–∏–Ω—è—Ç—å –≤ –∏—Ö —Å–µ–º—å—é
        if not can_join_marriage(target_marriage):
            if not target_marriage.get("expanded", False):
                await message.reply_text(
                    "üíî <b>–ò—Ö –±—Ä–∞–∫ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!</b>\n\n"
                    "üí° –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /—Ä–∞—Å—à–∏—Ä–∏—Ç—å —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.reply_text(
                    f"üíî <b>–ò—Ö —Å–µ–º—å—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                    f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {MAX_FAMILY_SIZE}",
                    parse_mode=ParseMode.HTML
                )
            return
            
        proposal_type = "join_family"
        
    else:
        # –û–±–∞ —Å–≤–æ–±–æ–¥–Ω—ã - –æ–±—ã—á–Ω—ã–π –±—Ä–∞–∫
        proposal_type = "regular"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    pid = secrets.token_urlsafe(8).replace("_", "-")
    proposer_name = display_name_from_user(proposer)
    proposal: Dict[str, Any] = {
        "id": pid,
        "chat_id": chat_id,
        "proposer_id": proposer.id,
        "proposer_name": proposer_name,
        "proposer_username": proposer.username if proposer.username else None,
        "target_id": target_user.id if target_user else None,
        "target_username": target_user.username if target_user and target_user.username else (target_username or None),
        "target_name": display_name_from_user(target_user) if target_user else (f"@{target_username}" if target_username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
        "type": proposal_type,
        "created_at": int(time.time()),
        "status": "pending",
    }
    
    if proposal_type == "join_family" and target_marriage:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–∞–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        target_marriage_idx = find_marriage_index(store, chat_id, target_user.id if target_user else None)
        if target_marriage_idx is not None:
            proposal["target_marriage_idx"] = target_marriage_idx
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–∞–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            proposal["target_marriage_members"] = [m["id"] for m in target_marriage.get("members", [])]
    
    store["proposals"][pid] = proposal
    save_marriage(store)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    me = await context.bot.get_me()
    bot_username = me.username
    deep_link = f"https://t.me/{bot_username}?start={MARRY_DEEPLINK_PREFIX}{pid}"

    dm_ok = False
    if target_user:
        try:
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üíç –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{pid}"),
                    InlineKeyboardButton("üíî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline:{pid}"),
                ]
            ])
            
            if proposal_type == "regular":
                text = (
                    f"üíï <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞!</b>\n\n"
                    f"üë§ –û—Ç: {safe_html(proposer_name)}\n"
                    f"üí¨ –í —á–∞—Ç–µ: ¬´{safe_html(chat.title or str(chat.id))}¬ª\n\n"
                    f"üíñ <i>–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?</i>"
                )
            elif proposal_type == "invite_to_family":
                family_size = len(proposer_marriage.get("members", []))
                text = (
                    f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é!</b>\n\n"
                    f"üë§ –û—Ç: {safe_html(proposer_name)}\n"
                    f"üí¨ –í —á–∞—Ç–µ: ¬´{safe_html(chat.title or str(chat.id))}¬ª\n"
                    f"üë• –†–∞–∑–º–µ—Ä —Å–µ–º—å–∏: {family_size} —á–µ–ª–æ–≤–µ–∫\n\n"
                    f"üíñ <i>–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏—Ö —Å–µ–º—å–µ?</i>"
                )
            else:  # join_family
                family_size = len(target_marriage.get("members", []))
                text = (
                    f"üôè <b>–ü—Ä–æ—Å—å–±–∞ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏!</b>\n\n"
                    f"üë§ {safe_html(proposer_name)} —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π —Å–µ–º—å–µ\n"
                    f"üí¨ –í —á–∞—Ç–µ: ¬´{safe_html(chat.title or str(chat.id))}¬ª\n"
                    f"üë• –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–µ–º—å–∏: {family_size} —á–µ–ª–æ–≤–µ–∫\n\n"
                    f"üíñ <i>–ü—Ä–∏–Ω—è—Ç—å –≤ —Å–µ–º—å—é?</i>"
                )
            
            await context.bot.send_message(
                chat_id=target_user.id,
                text=text,
                reply_markup=kb,
                parse_mode=ParseMode.HTML,
            )
            dm_ok = True
        except Exception:
            pass

    if dm_ok:
        await message.reply_text(
            f"üíå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {safe_html(proposal['target_name'])}\n"
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...",
            parse_mode=ParseMode.HTML,
        )
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é", url=deep_link)]
        ])
        await message.reply_text(
            f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {safe_html(proposal['target_name'])}\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML,
        )


async def cb_marry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    cq = update.callback_query
    if not cq or not update.effective_user:
        return

    user = update.effective_user
    data = cq.data or ""
    if not (data.startswith("accept:") or data.startswith("decline:")):
        await cq.answer()
        return

    action, pid = data.split(":", 1)
    store = load_marriage()
    prop = store["proposals"].get(pid)
    if not prop or prop.get("status") != "pending":
        await cq.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", show_alert=True)
        return

    if prop.get("proposer_id") == user.id:
        await cq.answer("üö´ –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
        return

    if prop.get("target_id") and prop["target_id"] != user.id:
        await cq.answer("‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
        return

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è
    if is_user_married_in_chat(store, prop["chat_id"], user.id) and prop.get("type") != "join_family":
        await cq.answer("üíç –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!", show_alert=True)
        return

    if action == "accept":
        proposal_type = prop.get("type", "regular")
        
        if proposal_type == "regular":
            # –û–±—ã—á–Ω—ã–π –±—Ä–∞–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –ª—é–¥—å–º–∏
            marriage = {
                "chat_id": prop["chat_id"],
                "members": [
                    {
                        "id": prop["proposer_id"],
                        "name": prop["proposer_name"],
                        "username": prop.get("proposer_username")
                    },
                    {
                        "id": user.id,
                        "name": display_name_from_user(user),
                        "username": user.username if user.username else None
                    }
                ],
                "since": int(time.time()),
                "expanded": False
            }
            store["marriages"].append(marriage)
            
            success_text = (
                f"üíç <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –æ—Ç {safe_html(prop['proposer_name'])}!\n"
                f"‚ù§Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –≤ –±—Ä–∞–∫–µ!\n"
                f"üéâ –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è!"
            )
            
            chat_text = (
                f"üéä <b>–°–í–ê–î–¨–ë–ê!</b> üéä\n\n"
                f"üíë {mention_html(prop['proposer_id'], prop['proposer_name'])} "
                f"–∏ {mention_html(user.id, display_name_from_user(user))} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!\n\n"
                f"üíç‚ù§Ô∏è <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤!</i> ‚ù§Ô∏èüíç"
            )
            
        elif proposal_type == "invite_to_family":
            # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–º—å—é
            proposer_marriage = get_user_marriage(store, prop["chat_id"], prop["proposer_id"])
            if not proposer_marriage or not can_join_marriage(proposer_marriage):
                await cq.answer("‚ùå –°–µ–º—å—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
            marriage_idx = find_marriage_index(store, prop["chat_id"], prop["proposer_id"])
            store["marriages"][marriage_idx]["members"].append({
                "id": user.id,
                "name": display_name_from_user(user),
                "username": user.username if user.username else None
            })
            
            family_size = len(store["marriages"][marriage_idx]["members"])
            success_text = (
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é!</b>\n\n"
                f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ {safe_html(prop['proposer_name'])}!\n"
                f"üë• –†–∞–∑–º–µ—Ä —Å–µ–º—å–∏: {family_size} —á–µ–ª–æ–≤–µ–∫\n"
                f"üéâ –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è!"
            )
            
            chat_text = (
                f"üéä <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –í –°–ï–ú–¨–ï!</b> üéä\n\n"
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ {mention_html(user.id, display_name_from_user(user))} "
                f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ–º—å–µ!\n\n"
                f"üíç‚ù§Ô∏è <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Å–µ–º—å–∏!</i> ‚ù§Ô∏èüíç"
            )
            
        else:  # join_family
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–º –±—Ä–∞–∫–µ
            if "target_marriage_idx" in prop and "target_marriage_members" in prop:
                target_marriage_idx = prop["target_marriage_idx"]
                target_marriage_members = prop["target_marriage_members"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞–∫ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–º
                if (target_marriage_idx < len(store["marriages"]) and 
                    store["marriages"][target_marriage_idx]["chat_id"] == prop["chat_id"] and
                    user.id in target_marriage_members):
                    
                    target_marriage = store["marriages"][target_marriage_idx]
                    if not can_join_marriage(target_marriage):
                        await cq.answer("‚ùå –°–µ–º—å—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
                        return
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–∞–∫
                    store["marriages"][target_marriage_idx]["members"].append({
                        "id": prop["proposer_id"],
                        "name": prop["proposer_name"],
                        "username": prop.get("proposer_username")
                    })
                    
                    family_size = len(store["marriages"][target_marriage_idx]["members"])
                else:
                    await cq.answer("‚ùå –¶–µ–ª–µ–≤–∞—è —Å–µ–º—å—è –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.", show_alert=True)
                    return
            else:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
                user_marriage = get_user_marriage(store, prop["chat_id"], user.id)
                if not user_marriage or not can_join_marriage(user_marriage):
                    await cq.answer("‚ùå –í–∞—à–∞ —Å–µ–º—å—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
                    return
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–µ–≥–æ –≤ —Å–µ–º—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                marriage_idx = find_marriage_index(store, prop["chat_id"], user.id)
                store["marriages"][marriage_idx]["members"].append({
                    "id": prop["proposer_id"],
                    "name": prop["proposer_name"],
                    "username": prop.get("proposer_username")
                })
                
                family_size = len(store["marriages"][marriage_idx]["members"])
            
            success_text = (
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ù–æ–≤—ã–π —á–ª–µ–Ω —Å–µ–º—å–∏!</b>\n\n"
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ {safe_html(prop['proposer_name'])} –≤ —Å–≤–æ—é —Å–µ–º—å—é!\n"
                f"üë• –†–∞–∑–º–µ—Ä —Å–µ–º—å–∏: {family_size} —á–µ–ª–æ–≤–µ–∫\n"
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
            )
            
            chat_text = (
                f"üéä <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –í –°–ï–ú–¨–ï!</b> üéä\n\n"
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ {mention_html(prop['proposer_id'], prop['proposer_name'])} "
                f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ–º—å–µ!\n\n"
                f"üíç‚ù§Ô∏è <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Å–µ–º—å–∏!</i> ‚ù§Ô∏èüíç"
            )


        prop["status"] = "accepted"
        save_marriage(store)

        await cq.edit_message_text(success_text, parse_mode=ParseMode.HTML)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç
        try:
            await context.bot.send_message(
                chat_id=prop["chat_id"],
                text=chat_text,
                parse_mode=ParseMode.HTML,
            )
        except Exception:
            pass
    else:
        prop["status"] = "declined"
        save_marriage(store)
        await cq.edit_message_text(
            f"üíî <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
            f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç {safe_html(prop['proposer_name'])}.\n"
            f"üò¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ...",
            parse_mode=ParseMode.HTML,
        )


async def cmd_marriages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not update.effective_chat:
        return
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíí –ö–æ–º–∞–Ω–¥–∞ /–±—Ä–∞–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    data = load_marriage()
    marriages = [m for m in data["marriages"] if m["chat_id"] == chat.id]
    if not marriages:
        await message.reply_text(
            "üíî <b>–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä</b>\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–±—Ä–∞–∫ —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º—É-—Ç–æ —Ä—É–∫—É –∏ —Å–µ—Ä–¥—Ü–µ!",
            parse_mode=ParseMode.HTML
        )
        return

    lines = []
    for i, marriage in enumerate(marriages, 1):
        members_text = get_marriage_members_text(marriage)
        members_count = len(marriage.get("members", []))
        
        status_emoji = "üîì" if marriage.get("expanded", False) else "üîí"
        family_info = f"({members_count} —á–µ–ª.)" if members_count > 2 else ""
        
        lines.append(
            f"{i}. {members_text} {status_emoji} {family_info}\n"
            f"   <i>–í –±—Ä–∞–∫–µ —Å {format_timestamp(marriage['since'])}</i>"
        )

    footer = (
        "\n\n<i>üîì - —Å–µ–º—å—è –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "üîí - —Å–µ–º—å—è –∑–∞–∫—Ä—ã—Ç–∞</i>"
    )

    await message.reply_text(
        f"üíç <b>–°—á–∞—Å—Ç–ª–∏–≤—ã–µ –ø–∞—Ä—ã —ç—Ç–æ–≥–æ —á–∞—Ç–∞:</b>\n\n" + "\n\n".join(lines) + footer,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


async def cmd_divorce(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not update.effective_chat:
        return
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíî –ö–æ–º–∞–Ω–¥–∞ /—Ä–∞–∑–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    user = update.effective_user
    if not user:
        return

    store = load_marriage()
    marriage = get_user_marriage(store, chat.id, user.id)
    if not marriage:
        await message.reply_text(
            "üíî <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ</b>\n\n"
            "üí° –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Å–µ–±–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é /–±—Ä–∞–∫!",
            parse_mode=ParseMode.HTML
        )
        return

    members = marriage.get("members", [])
    members_count = len(members)
    
    if members_count <= 2:
        # –û–±—ã—á–Ω—ã–π —Ä–∞–∑–≤–æ–¥ - —É–¥–∞–ª—è–µ–º –≤–µ—Å—å –±—Ä–∞–∫
        remove_user_from_marriage(store, chat.id, user.id)
        
        partner = None
        for member in members:
            if member["id"] != user.id:
                partner = member
                break
        
        if partner:
            await message.reply_text(
                f"üíî <b>–†–ê–ó–í–û–î –û–§–û–†–ú–õ–ï–ù</b>\n\n"
                f"üò¢ {mention_html(user.id, display_name_from_user(user))} –∏ "
                f"{mention_html(partner['id'], partner['name'])} –±–æ–ª—å—à–µ –Ω–µ –≤ –±—Ä–∞–∫–µ.\n\n"
                f"üïäÔ∏è <i>–ñ–µ–ª–∞–µ–º –æ–±–æ–∏–º –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å—á–∞—Å—Ç—å–µ...</i>",
                parse_mode=ParseMode.HTML,
            )
        else:
            await message.reply_text(
                "üíî <b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±—Ä–∞–∫</b>",
                parse_mode=ParseMode.HTML,
            )
    else:
        # –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–∏–≥–∞–º–Ω–æ–π —Å–µ–º—å–∏
        remove_user_from_marriage(store, chat.id, user.id)
        
        await message.reply_text(
            f"üíî <b>–í–´–•–û–î –ò–ó –°–ï–ú–¨–ò</b>\n\n"
            f"üò¢ {mention_html(user.id, display_name_from_user(user))} –ø–æ–∫–∏–Ω—É–ª —Å–µ–º—å—é.\n"
            f"üë• –í —Å–µ–º—å–µ –æ—Å—Ç–∞–ª–æ—Å—å {members_count - 1} —á–µ–ª–æ–≤–µ–∫.\n\n"
            f"üïäÔ∏è <i>–ñ–µ–ª–∞–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å—á–∞—Å—Ç—å–µ...</i>",
            parse_mode=ParseMode.HTML
        )


async def cmd_expand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞–∫–∞"""
    message = update.message
    if not message or not update.effective_chat:
        return
    
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíí –ö–æ–º–∞–Ω–¥–∞ /—Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    user = update.effective_user
    if not user:
        return

    store = load_marriage()
    marriage = get_user_marriage(store, chat.id, user.id)
    
    if not marriage:
        await message.reply_text(
            "üíî <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ</b>\n\n"
            "üí° –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Å–µ–±–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é /–±—Ä–∞–∫!",
            parse_mode=ParseMode.HTML
        )
        return
    
    if marriage.get("expanded", False):
        await message.reply_text(
            "‚úÖ <b>–í–∞—à–∞ —Å–µ–º—å—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!</b>\n\n"
            "üë• –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π —Å–µ–º—å–µ.\n"
            "üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∑–∞–∫—Ä—ã—Ç—å_–±—Ä–∞–∫ —á—Ç–æ–±—ã –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –†–∞—Å—à–∏—Ä—è–µ–º –±—Ä–∞–∫
    marriage_idx = find_marriage_index(store, chat.id, user.id)
    if marriage_idx is not None:
        store["marriages"][marriage_idx]["expanded"] = True
        save_marriage(store)
        
        members_count = len(marriage.get("members", []))
        await message.reply_text(
            f"üîì <b>–°–µ–º—å—è –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!</b>\n\n"
            f"üë• –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {members_count}/{MAX_FAMILY_SIZE}\n"
            f"üí° –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç:\n"
            f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å /–±—Ä–∞–∫ @–≤–∞—à_–Ω–∏–∫ - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
            f"‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /–±—Ä–∞–∫ @–Ω–∏–∫ - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–æ–≥–æ-—Ç–æ\n\n"
            f"üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∑–∞–∫—Ä—ã—Ç—å_–±—Ä–∞–∫ —á—Ç–æ–±—ã –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            parse_mode=ParseMode.HTML
        )


async def cmd_close_marriage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞–∫–∞"""
    message = update.message
    if not message or not update.effective_chat:
        return
    
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíí –ö–æ–º–∞–Ω–¥–∞ /–∑–∞–∫—Ä—ã—Ç—å_–±—Ä–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    user = update.effective_user
    if not user:
        return

    store = load_marriage()
    marriage = get_user_marriage(store, chat.id, user.id)
    
    if not marriage:
        await message.reply_text(
            "üíî <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ</b>\n\n"
            "üí° –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Å–µ–±–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é /–±—Ä–∞–∫!",
            parse_mode=ParseMode.HTML
        )
        return
    
    if not marriage.get("expanded", False):
        await message.reply_text(
            "üîí <b>–í–∞—à–∞ —Å–µ–º—å—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!</b>\n\n"
            "üë• –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
            "üîì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ä–∞—Å—à–∏—Ä–∏—Ç—å —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞–∫
    marriage_idx = find_marriage_index(store, chat.id, user.id)
    if marriage_idx is not None:
        store["marriages"][marriage_idx]["expanded"] = False
        save_marriage(store)
        
        members_count = len(marriage.get("members", []))
        await message.reply_text(
            f"üîí <b>–°–µ–º—å—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!</b>\n\n"
            f"üë• –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {members_count} —á–µ–ª–æ–≤–µ–∫\n"
            f"üí° –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n\n"
            f"üîì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ä–∞—Å—à–∏—Ä–∏—Ç—å —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            parse_mode=ParseMode.HTML
        )
