"""–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –±—Ä–∞–∫–æ–≤."""
import secrets
import time
from typing import Dict, Any, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatType
from telegram.ext import ContextTypes
from storage import load_marriage, save_marriage
from utils import display_name_from_user, safe_html, mention_html, format_timestamp
from config import MARRY_DEEPLINK_PREFIX


def is_user_married_in_chat(store: Dict[str, Any], chat_id: int, user_id: int) -> bool:
    for m in store.get("marriages", []):
        if m["chat_id"] == chat_id and (m["a_id"] == user_id or m["b_id"] == user_id):
            return True
    return False


def find_user_partner_in_chat(store: Dict[str, Any], chat_id: int, user_id: int) -> Optional[Dict[str, Any]]:
    for m in store.get("marriages", []):
        if m["chat_id"] == chat_id and (m["a_id"] == user_id or m["b_id"] == user_id):
            return m
    return None


def find_marriage_of_user(store: Dict[str, Any], chat_id: int, user_id: int) -> Tuple[Optional[int], Optional[Dict[str, Any]]]:
    for idx, m in enumerate(store.get("marriages", [])):
        if m["chat_id"] == chat_id and (m["a_id"] == user_id or m["b_id"] == user_id):
            return idx, m
    return None, None


def remove_marriage(store: Dict[str, Any], idx: int) -> None:
    if 0 <= idx < len(store["marriages"]):
        del store["marriages"][idx]
        save_marriage(store)


async def cmd_marry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not update.effective_chat:
        return

    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíí –ö–æ–º–∞–Ω–¥–∞ /–±—Ä–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    proposer = update.effective_user
    if not proposer:
        return

    target_user = None
    target_username = None

    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        if message.entities:
            for ent in message.entities:
                if ent.type == "text_mention" and ent.user:
                    target_user = ent.user
                    break
                if ent.type == "mention":
                    text = message.text or ""
                    mention_text = text[ent.offset: ent.offset + ent.length]
                    target_username = mention_text.lstrip("@")

    if not target_user and not target_username:
        await message.reply_text(
            "üíï <b>–ö–æ–≥–æ –∑–≤–∞—Ç—å –≤ –±—Ä–∞–∫?</b>\n\n"
            "üìù <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</i> –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /–±—Ä–∞–∫ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –∫–∞–∫ ¬´—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ¬ª (—Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞).\n"
            "‚ö†Ô∏è –û–±—ã—á–Ω—ã–π @username –º–æ–∂–µ—Ç –Ω–µ –¥–∞—Ç—å –±–æ—Ç—É —É–∑–Ω–∞—Ç—å ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –õ–°.",
            parse_mode=ParseMode.HTML
        )
        return

    if target_user and target_user.id == proposer.id:
        await message.reply_text("üö´ <b>–ï–±–ª–∞–Ω?</b>\n\nüí° –ù–∞–π–¥–∏ —Å–µ–±–µ –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —á–∞—Ç–µ!", parse_mode=ParseMode.HTML)
        return

    store = load_marriage()
    chat_id = chat.id

    if is_user_married_in_chat(store, chat_id, proposer.id):
        partner = find_user_partner_in_chat(store, chat_id, proposer.id)
        partner_name = partner["b_name"] if partner["a_id"] == proposer.id else partner["a_name"]
        await message.reply_text(
            f"üíç <b>–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!</b>\n\n"
            f"‚ù§Ô∏è –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: {safe_html(partner_name)}\n"
            f"üíî –î–ª—è —Ä–∞–∑–≤–æ–¥–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ /—Ä–∞–∑–≤–æ–¥",
            parse_mode=ParseMode.HTML,
        )
        return

    if target_user and is_user_married_in_chat(store, chat_id, target_user.id):
        await message.reply_text(
            f"üíî <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!</b>\n\n"
            f"üíî {safe_html(display_name_from_user(target_user))} —É–∂–µ –∑–∞–Ω—è—Ç(–∞) –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            parse_mode=ParseMode.HTML
        )
        return

    pid = secrets.token_urlsafe(8).replace("_", "-")
    proposer_name = display_name_from_user(proposer)
    proposal: Dict[str, Any] = {
        "id": pid,
        "chat_id": chat_id,
        "proposer_id": proposer.id,
        "proposer_name": proposer_name,
        "target_id": target_user.id if target_user else None,
        "target_username": target_user.username if target_user and target_user.username else (target_username or None),
        "target_name": display_name_from_user(target_user) if target_user else (f"@{target_username}" if target_username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
        "created_at": int(time.time()),
        "status": "pending",
    }
    store["proposals"][pid] = proposal
    save_marriage(store)

    me = await context.bot.get_me()
    bot_username = me.username
    deep_link = f"https://t.me/{bot_username}?start={MARRY_DEEPLINK_PREFIX}{pid}"

    dm_ok = False
    if target_user:
        try:
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üíç –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"accept:{pid}"),
                    InlineKeyboardButton("üíî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline:{pid}"),
                ]
            ])
            await context.bot.send_message(
                chat_id=target_user.id,
                text=(
                    f"üíï <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞!</b>\n\n"
                    f"üë§ –û—Ç: {safe_html(proposer_name)}\n"
                    f"üí¨ –í —á–∞—Ç–µ: ¬´{safe_html(chat.title or str(chat.id))}¬ª\n\n"
                    f"üíñ <i>–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?</i>"
                ),
                reply_markup=kb,
                parse_mode=ParseMode.HTML,
            )
            dm_ok = True
        except Exception:
            pass

    if dm_ok:
        await message.reply_text(
            f"üíå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {safe_html(proposal['target_name'])}\n"
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...",
            parse_mode=ParseMode.HTML,
        )
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é", url=deep_link)]
        ])
        await message.reply_text(
            f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {safe_html(proposal['target_name'])}\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=kb,
            parse_mode=ParseMode.HTML,
        )


async def cb_marry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    cq = update.callback_query
    if not cq or not update.effective_user:
        return

    user = update.effective_user
    data = cq.data or ""
    if not (data.startswith("accept:") or data.startswith("decline:")):
        await cq.answer()
        return

    action, pid = data.split(":", 1)
    store = load_marriage()
    prop = store["proposals"].get(pid)
    if not prop or prop.get("status") != "pending":
        await cq.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", show_alert=True)
        return

    if prop.get("proposer_id") == user.id:
        await cq.answer("üö´ –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
        return

    if prop.get("target_id") and prop["target_id"] != user.id:
        await cq.answer("‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
        return

    if is_user_married_in_chat(store, prop["chat_id"], user.id):
        await cq.answer("üíç –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!", show_alert=True)
        return

    if action == "accept":
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞–∫
        marriage = {
            "chat_id": prop["chat_id"],
            "a_id": prop["proposer_id"],
            "a_name": prop["proposer_name"],
            "b_id": user.id,
            "b_name": display_name_from_user(user),
            "since": int(time.time()),
        }
        store["marriages"].append(marriage)
        prop["status"] = "accepted"
        save_marriage(store)

        await cq.edit_message_text(
            f"üíç <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –æ—Ç {safe_html(prop['proposer_name'])}!\n"
            f"‚ù§Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –≤ –±—Ä–∞–∫–µ!\n"
            f"üéâ –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è!",
            parse_mode=ParseMode.HTML,
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç
        try:
            await context.bot.send_message(
                chat_id=prop["chat_id"],
                text=(
                    f"üéä <b>–°–í–ê–î–¨–ë–ê!</b> üéä\n\n"
                    f"üíë {mention_html(prop['proposer_id'], prop['proposer_name'])} "
                    f"–∏ {mention_html(user.id, display_name_from_user(user))} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!\n\n"
                    f"üíç‚ù§Ô∏è <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤!</i> ‚ù§Ô∏èüíç"
                ),
                parse_mode=ParseMode.HTML,
            )
        except Exception:
            pass
    else:
        prop["status"] = "declined"
        save_marriage(store)
        await cq.edit_message_text(
            f"üíî <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
            f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞ –æ—Ç {safe_html(prop['proposer_name'])}.\n"
            f"üò¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ...",
            parse_mode=ParseMode.HTML,
        )


async def cmd_marriages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not update.effective_chat:
        return
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíí –ö–æ–º–∞–Ω–¥–∞ /–±—Ä–∞–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    data = load_marriage()
    pairs = [m for m in data["marriages"] if m["chat_id"] == chat.id]
    if not pairs:
        await message.reply_text(
            "üíî <b>–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä</b>\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–±—Ä–∞–∫ —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º—É-—Ç–æ —Ä—É–∫—É –∏ —Å–µ—Ä–¥—Ü–µ!",
            parse_mode=ParseMode.HTML
        )
        return

    lines = []
    for i, m in enumerate(pairs, 1):
        a = mention_html(m["a_id"], m["a_name"])
        b = mention_html(m["b_id"], m["b_name"])
        lines.append(f"{i}. {a} üíï {b}\n   <i>–í –±—Ä–∞–∫–µ —Å {format_timestamp(m['since'])}</i>")

    await message.reply_text(
        f"üíç <b>–°—á–∞—Å—Ç–ª–∏–≤—ã–µ –ø–∞—Ä—ã —ç—Ç–æ–≥–æ —á–∞—Ç–∞:</b>\n\n" + "\n\n".join(lines),
        parse_mode=ParseMode.HTML
    )


async def cmd_divorce(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if not message or not update.effective_chat:
        return
    chat = update.effective_chat
    if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üíî –ö–æ–º–∞–Ω–¥–∞ /—Ä–∞–∑–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    user = update.effective_user
    if not user:
        return

    data = load_marriage()
    idx, marriage = find_marriage_of_user(data, chat.id, user.id)
    if marriage is None:
        await message.reply_text(
            "üíî <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ</b>\n\n"
            "üí° –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Å–µ–±–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é /–±—Ä–∞–∫!",
            parse_mode=ParseMode.HTML
        )
        return

    mentioned_id = None
    if message.reply_to_message and message.reply_to_message.from_user:
        mentioned_id = message.reply_to_message.from_user.id
    else:
        if message.entities:
            for ent in message.entities:
                if ent.type == "text_mention" and ent.user:
                    mentioned_id = ent.user.id
                    break

    a_id, a_name = marriage["a_id"], marriage["a_name"]
    b_id, b_name = marriage["b_id"], marriage["b_name"]
    partner_id = b_id if a_id == user.id else a_id
    partner_name = b_name if a_id == user.id else a_name

    if mentioned_id is not None and mentioned_id != partner_id:
        await message.reply_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ–¥–∞</b>\n\n"
            f"üíç –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ —Å {mention_html(partner_id, partner_name)}\n\n"
            f"üí° –î–ª—è —Ä–∞–∑–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Ä–∞–∑–≤–æ–¥ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.",
            parse_mode=ParseMode.HTML,
        )
        return

    remove_marriage(data, idx)
    await message.reply_text(
        f"üíî <b>–†–ê–ó–í–û–î –û–§–û–†–ú–õ–ï–ù</b>\n\n"
        f"üò¢ {mention_html(user.id, display_name_from_user(user))} –∏ "
        f"{mention_html(partner_id, partner_name)} –±–æ–ª—å—à–µ –Ω–µ –≤ –±—Ä–∞–∫–µ.\n\n"
        f"üïäÔ∏è <i>–ñ–µ–ª–∞–µ–º –æ–±–æ–∏–º –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å—á–∞—Å—Ç—å–µ...</i>",
        parse_mode=ParseMode.HTML,
    )
