import time
import random
import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatType
from telegram.ext import ContextTypes

from storage import load_cooldowns, save_cooldowns
from marriages import is_user_married_in_chat
from utils import safe_html

logger = logging.getLogger(__name__)

# –ö—É–ª–¥–∞—É–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SELFCARE_COOLDOWN = 7200  # 2 —á–∞—Å–∞
REDUCED_COOLDOWN = 5400   # 1.5 —á–∞—Å–∞
RIBS_REQUIRED = 3         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è —Å–ª–æ–º–∞ —Ä–µ–±–µ—Ä

# –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∞–º–æ–æ—Ç—Å–æ—Å–µ
SELFCARE_MESSAGES = [
    "üçÜ {user} –º–∞—Å—Ç–µ—Ä—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª —Å–∞–º–æ–æ—Ç—Å–æ—Å! –ì–∏–±–∫–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç–µ! ü§∏‚Äç‚ôÇÔ∏è",
    "üî• {user} –ø–æ–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é —Ä–∞—Å—Ç—è–∂–∫—É –∏ —Å–¥–µ–ª–∞–ª —Å–µ–±–µ –ø—Ä–∏—è—Ç–Ω–æ! üòè",
    "üí™ {user} –ø–æ—Ä–∞–¥–æ–≤–∞–ª —Å–µ–±—è –º–∏–Ω–µ—Ç–∏–∫–æ–≤ –∏ –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ –π–æ–≥–∞ - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ –º–µ–¥–∏—Ç–∞—Ü–∏—é! üßò‚Äç‚ôÇÔ∏è",
    "üéØ {user} –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç –≤ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏! –ë—Ä–∞–≤–æ! üëè",
    "üåü {user} –ø–æ—Ä–∞–¥–æ–≤–∞–ª—Å—è –º–∏–Ω–µ—Ç–∏–∫–æ–º –∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∞–∫—Ä–æ–±–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –≤—ã—Å—à–µ–≥–æ –∫–ª–∞—Å—Å–∞! ü§π‚Äç‚ôÇÔ∏è",
    "üèÜ {user} –æ—Ç—Å–æ—Å–∞–ª —Å–∞–º —Å–µ–±–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∑–æ–ª–æ—Ç—É—é –º–µ–¥–∞–ª—å –ø–æ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏! ü•á",
    "üé™ {user} –ø–æ—Å–æ—Å–∞–ª —Å–µ–±–µ. –î–∞ —Ç—ã –±—ã –º–æ–≥ –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ü–∏—Ä–∫–µ —Å —Ç–∞–∫–æ–π –≥–∏–±–∫–æ—Å—Ç—å—é! üé≠"
]

# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∂–µ–Ω–∞—Ç—ã—Ö
MARRIED_ERROR_MESSAGES = [
    "üíç –≠–π, —É —Ç–µ–±—è –∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä! –ó–∞—á–µ–º —Å–∞–º–æ–æ—Ç—Å–æ—Å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ? üòè",
    "üíï –¢—ã –≤ –±—Ä–∞–∫–µ! –¢–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —Å–ø—Ä–∞–≤–∏—Ç—Å—è –ª—É—á—à–µ –ª—é–±–æ–≥–æ —Å–∞–º–æ–æ—Ç—Å–æ—Å–∞! üòò",
    "üë´ –°–µ–º–µ–π–Ω—ã–µ –ª—é–¥–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∞—Ç—å —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–µ! üíë",
    "üíí –í –±—Ä–∞–∫–µ –µ—Å—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö! üòâ",
    "üíñ –ó–∞—á–µ–º —Å–∞–º–æ–æ—Ç—Å–æ—Å, –∫–æ–≥–¥–∞ —Ä—è–¥–æ–º –ª—é–±—è—â–∏–π —á–µ–ª–æ–≤–µ–∫? ü•∞",
    "üë∞‚Äç‚ôÇÔ∏è –ñ–µ–Ω–∞—Ç—ã–º/–∑–∞–º—É–∂–Ω–∏–º —Ç–∞–∫–∏–µ –≤–æ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–ª–æ–∂–µ–Ω—ã! "
]

# –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Ä–µ–±—Ä–∞—Ö
RIBS_MESSAGES = [
    "üíÄ *–•–†–£–°–¢* –†–µ–±—Ä–æ —Ç—Ä–µ—Å–Ω—É–ª–æ! –ù–æ –≥–∏–±–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å! ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)",
    "ü¶¥ *–ö–†–ê–ö* –ï—â–µ –æ–¥–Ω–æ —Ä–µ–±—Ä–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–æ —Ä–∞–¥–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞! ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)",
    "üí• *–©–ï–õ–ö* –ë–æ–ª—å - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ, –∞ —Å–∞–º–æ–æ—Ç—Å–æ—Å - –Ω–∞–≤—Å–µ–≥–¥–∞! ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)",
    "‚ö° *–•–†–Ø–°–¨* –†–µ–±—Ä–∞ –ª–æ–º–∞—é—Ç—Å—è, –Ω–æ –¥—É—Ö –Ω–µ —Å–ª–æ–º–ª–µ–Ω! ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)",
    "üî® *–¢–†–ï–©* –ñ–µ—Ä—Ç–≤—ã —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–π —Ü–µ–ª–∏! ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)"
]

RIBS_COMPLETE_MESSAGE = "üéâ –í—Å–µ —Ä–µ–±—Ä–∞ —Å–ª–æ–º–∞–Ω—ã! –ö—É–ª–¥–∞—É–Ω —É–º–µ–Ω—å—à–µ–Ω –¥–æ 1.5 —á–∞—Å–æ–≤! –¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä! üèÜ"


def get_selfcare_cooldown_key(user_id: int, chat_id: int) -> str:
    return f"selfcare_{user_id}_{chat_id}"


def get_ribs_key(user_id: int, chat_id: int) -> str:
    return f"ribs_{user_id}_{chat_id}"


def check_selfcare_cooldown(user_id: int, chat_id: int) -> Optional[float]:
    cooldowns = load_cooldowns()
    key = get_selfcare_cooldown_key(user_id, chat_id)
    
    if key not in cooldowns:
        return None
    
    last_selfcare = cooldowns[key].get("last_selfcare", 0)
    is_reduced = cooldowns[key].get("reduced", False)
    
    current_time = time.time()
    time_passed = current_time - last_selfcare
    
    cooldown_time = REDUCED_COOLDOWN if is_reduced else SELFCARE_COOLDOWN
    
    if time_passed >= cooldown_time:
        return None
    
    return cooldown_time - time_passed


def set_selfcare_cooldown(user_id: int, chat_id: int) -> None:
    cooldowns = load_cooldowns()
    key = get_selfcare_cooldown_key(user_id, chat_id)
    
    if key not in cooldowns:
        cooldowns[key] = {}
    
    cooldowns[key]["last_selfcare"] = time.time()
    cooldowns[key]["reduced"] = False
    save_cooldowns(cooldowns)


def get_ribs_broken(user_id: int, chat_id: int) -> int:
    cooldowns = load_cooldowns()
    key = get_ribs_key(user_id, chat_id)
    
    if key not in cooldowns:
        return 0
    
    return cooldowns[key].get("broken", 0)


def break_rib(user_id: int, chat_id: int) -> int:
    cooldowns = load_cooldowns()
    ribs_key = get_ribs_key(user_id, chat_id)
    
    if ribs_key not in cooldowns:
        cooldowns[ribs_key] = {}
    
    current_broken = cooldowns[ribs_key].get("broken", 0)
    new_broken = min(current_broken + 1, RIBS_REQUIRED)
    cooldowns[ribs_key]["broken"] = new_broken
    
    # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–±—Ä–∞ —Å–ª–æ–º–∞–Ω—ã, —É–º–µ–Ω—å—à–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    if new_broken >= RIBS_REQUIRED:
        selfcare_key = get_selfcare_cooldown_key(user_id, chat_id)
        if selfcare_key in cooldowns:
            cooldowns[selfcare_key]["reduced"] = True
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–±–µ—Ä
        cooldowns[ribs_key]["broken"] = 0
    
    save_cooldowns(cooldowns)
    return new_broken


def format_time_remaining(seconds: float) -> str:
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    
    if hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    else:
        return f"{minutes} –º–∏–Ω."


def create_ribs_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–æ–º–∞ —Ä–µ–±–µ—Ä"""
    button = InlineKeyboardButton(
        "ü¶¥ –°–ª–æ–º–∞—Ç—å —Ä–µ–±—Ä–∞", 
        callback_data=f"ribs:{user_id}"
    )
    return InlineKeyboardMarkup([[button]])


async def cmd_selfcare(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /—Å–∞–º–æ–æ—Ç—Å–æ—Å"""
    message = update.message
    if not message or not update.effective_user:
        return
    
    user = update.effective_user
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±—Ä–∞–∫–µ
    from storage import load_marriage
    store = load_marriage()
    if is_user_married_in_chat(store, chat_id, user.id):
        error_message = random.choice(MARRIED_ERROR_MESSAGES)
        await message.reply_text(error_message, parse_mode=ParseMode.HTML)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    remaining_time = check_selfcare_cooldown(user.id, chat_id)
    if remaining_time is not None:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Failed to delete user message: %s", e)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_msg = await context.bot.send_message(
            chat_id,
            f"üö´ <b>–†–∞–Ω–æ –µ—â–µ!</b>\n\n"
            f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {format_time_remaining(remaining_time)}\n"
            f"üí° <i>–û—Ä–≥–∞–Ω–∏–∑–º—É –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è...</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        async def delete_warning(context):
            try:
                await context.bot.delete_message(chat_id, warning_msg.message_id)
            except Exception as e:
                logger.warning("Failed to delete warning message: %s", e)
        
        context.job_queue.run_once(delete_warning, 3)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    set_selfcare_cooldown(user.id, chat_id)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    selfcare_message = random.choice(SELFCARE_MESSAGES)
    formatted_message = selfcare_message.format(user=safe_html(user.first_name))
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–ª–æ–º–∞ —Ä–µ–±–µ—Ä
    keyboard = create_ribs_keyboard(user.id)
    
    await message.reply_text(
        formatted_message,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    
    logger.info(
        "Selfcare command used by %s (%d) in chat %d",
        user.first_name, user.id, chat_id
    )


async def cb_ribs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ —Å–ª–æ–º–∞ —Ä–µ–±–µ—Ä"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, user_id_str = query.data.split(":")
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if query.from_user.id != user_id:
        await query.answer("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à–∏ —Ä–µ–±—Ä–∞!", show_alert=True)
        return
    
    chat_id = query.message.chat.id
    
    # –õ–æ–º–∞–µ–º —Ä–µ–±—Ä–æ
    broken_ribs = break_rib(user_id, chat_id)
    remaining = RIBS_REQUIRED - broken_ribs
    
    if remaining > 0:
        # –ï—â–µ –Ω—É–∂–Ω–æ –ª–æ–º–∞—Ç—å —Ä–µ–±—Ä–∞
        rib_message = random.choice(RIBS_MESSAGES).format(remaining=remaining)
        keyboard = create_ribs_keyboard(user_id)
        
        try:
            await query.edit_message_text(
                rib_message,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.warning("Failed to edit ribs message: %s", e)
    else:
        # –í—Å–µ —Ä–µ–±—Ä–∞ —Å–ª–æ–º–∞–Ω—ã
        try:
            await query.edit_message_text(
                RIBS_COMPLETE_MESSAGE,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.warning("Failed to edit completion message: %s", e)
    
    logger.info(
        "Ribs broken by %s (%d) in chat %d, total: %d",
        query.from_user.first_name, user_id, chat_id, broken_ribs
    )
