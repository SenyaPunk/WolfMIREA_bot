"""–°–∏—Å—Ç–µ–º–∞ —Ç–æ–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
import logging
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from economy import load_economy, format_balance
from blackjack import get_blackjack_leaderboard
from utils import safe_html, profile_link_html

logger = logging.getLogger(__name__)


def get_balance_leaderboard() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É."""
    data = load_economy()
    balances = data.get("balances", {})
    usernames = data.get("usernames", {})
    
    players = []
    for user_id_str, balance in balances.items():
        if balance <= 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            continue
            
        user_id = int(user_id_str)
        
        # –ò—â–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        username = None
        for uname, uid in usernames.items():
            if uid == user_id:
                user_name = f"@{uname}"
                username = uname
                break
        
        players.append({
            "user_id": user_id,
            "name": user_name,
            "username": username,
            "balance": balance
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±—ã–≤–∞–Ω–∏–µ)
    players.sort(key=lambda x: -x["balance"])
    
    return players


def format_balance_top(players: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É."""
    if not players:
        return "üìä <b>–¢–û–ü –ü–û –ë–ê–õ–ê–ù–°–£</b>\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    message = "üìä <b>–¢–û–ü –ü–û –ë–ê–õ–ê–ù–°–£</b>\n\n"
    
    for i, player in enumerate(players[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        medal = ""
        if i == 1:
            medal = "ü•á"
        elif i == 2:
            medal = "ü•à"
        elif i == 3:
            medal = "ü•â"
        else:
            medal = f"{i}."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º profile_link_html –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –±–µ–∑ –ø–∏–Ω–≥–∞
        user_link = profile_link_html(player['user_id'], player['name'], player.get('username'))
        message += f"{medal} <b>{user_link}</b> ‚Äî {format_balance(player['balance'])}\n"
    
    return message


def format_blackjack_top(players: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –ø–æ –±–ª–µ–∫–¥–∂–µ–∫—É."""
    if not players:
        return "üé∞ <b>–¢–û–ü –ü–û –ë–õ–ï–ö–î–ñ–ï–ö–£</b>\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    message = "üé∞ <b>–¢–û–ü –ü–û –ë–õ–ï–ö–î–ñ–ï–ö–£</b>\n\n"
    
    for i, player in enumerate(players[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        medal = ""
        if i == 1:
            medal = "ü•á"
        elif i == 2:
            medal = "ü•à"
        elif i == 3:
            medal = "ü•â"
        else:
            medal = f"{i}."
        
        wins = player['wins']
        losses = player['losses']
        draws = player['draws']
        games = player['games']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        win_rate = (wins / games * 100) if games > 0 else 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º profile_link_html –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –±–µ–∑ –ø–∏–Ω–≥–∞
        user_link = profile_link_html(player['user_id'], player['name'], player.get('username'))
        message += (f"{medal} <b>{user_link}</b>\n"
                   f"    üèÜ {wins} –ø–æ–±–µ–¥ | ü§ù {draws} –Ω–∏—á—å–∏—Ö | üí• {losses} –ø–æ—Ä–∞–∂–µ–Ω–∏–π\n"
                   f"    üìä {games} –∏–≥—Ä | üìà {win_rate:.1f}% –ø–æ–±–µ–¥\n\n")
    
    return message


async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /top - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not update.message:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É
    balance_players = get_balance_leaderboard()
    message = format_balance_top(balance_players)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –±–ª–µ–∫–¥–∂–µ–∫
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé∞ BlackJack", callback_data="top_switch:blackjack")]
    ])
    
    await update.message.reply_text(
        message,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML, 
        disable_web_page_preview=True

    )


async def cb_top_switch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–ø–∞–º–∏."""
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    switch_to = query.data.split(":", 1)[1]
    
    if switch_to == "blackjack":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø –ø–æ –±–ª–µ–∫–¥–∂–µ–∫—É
        blackjack_players = get_blackjack_leaderboard()
        message = format_blackjack_top(blackjack_players)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –ü–æ –º–æ–Ω–µ—Ç–∞–º", callback_data="top_switch:balance")]
        ])
    
    elif switch_to == "balance":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É
        balance_players = get_balance_leaderboard()
        message = format_balance_top(balance_players)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé∞ BlackJack", callback_data="top_switch:blackjack")]
        ])
    
    else:
        return
    
    try:
        await query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Failed to edit top message: {e}")
