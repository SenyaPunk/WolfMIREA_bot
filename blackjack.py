import asyncio
import random
import time
import logging
import os
import json
from pathlib import Path
from typing import Dict, List, Optional, Set, Any
from dataclasses import dataclass, field
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.constants import ParseMode, ChatType
from telegram.ext import ContextTypes
from admin import is_admin
from economy import get_user_balance, add_user_balance

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
GAME_SIGNUP_TIME = 60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤
MAX_PLAYERS = 5  # –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤
MIN_PLAYERS = 2  # –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games: Dict[int, 'BlackjackGame'] = {}

@dataclass
class Card:
    """–ö–∞—Ä—Ç–∞"""
    suit: str  # ‚ô†Ô∏è‚ô•Ô∏è‚ô¶Ô∏è‚ô£Ô∏è
    rank: str  # A, 2-10, J, Q, K
    value: int  # –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
    
    def __str__(self):
        return f"{self.rank}{self.suit}"

@dataclass 
class Player:
    """–ò–≥—Ä–æ–∫ –≤ –±–ª–µ–∫–¥–∂–µ–∫–µ"""
    
    def __init__(self, user_id: int, username: str, first_name: str):
        self.user_id = user_id
        self.username = username
        self.first_name = first_name
        self.cards: List[Card] = []
        self.score: int = 0
        self.is_bust: bool = False
        self.is_blackjack: bool = False
        self.is_stand: bool = False
        self.bet: int = 0  # —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
        self.temp_bet: int = 0  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞
        self.slave_bet: bool = False  # —Å—Ç–∞–≤–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞–±–∞
        self.slave_bet_info: Optional[Dict[str, Any]] = None  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ä–∞–±–µ

def load_blackjack_stats() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–µ–∫–¥–∂–µ–∫–∞."""
    stats_file = DATA_DIR / "blackjack_stats.json"
    if not stats_file.exists():
        return {"stats": {}}
    try:
        with open(stats_file, "r", encoding="utf-8") as f:
            data = json.load(f) or {}
            data.setdefault("stats", {})
            return data
    except Exception as e:
        logger.error("Failed to read blackjack stats: %s", e)
        return {"stats": {}}


def save_blackjack_stats(data: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–µ–∫–¥–∂–µ–∫–∞."""
    stats_file = DATA_DIR / "blackjack_stats.json"
    try:
        with open(stats_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error("Failed to write blackjack stats: %s", e)


def update_player_stats(user_id: int, result: str, user_name: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞. result: 'win', 'loss', 'draw'"""
    data = load_blackjack_stats()
    user_key = str(user_id)
    
    if user_key not in data["stats"]:
        data["stats"][user_key] = {
            "wins": 0,
            "losses": 0,
            "draws": 0,
            "games": 0,
            "name": user_name
        }
    
    stats = data["stats"][user_key]
    stats["name"] = user_name  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è
    stats["games"] += 1
    
    if result == "win":
        stats["wins"] += 1
    elif result == "loss":
        stats["losses"] += 1
    elif result == "draw":
        stats["draws"] += 1
    
    save_blackjack_stats(data)


def get_blackjack_leaderboard() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–ª–µ–∫–¥–∂–µ–∫—É, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø–æ–±–µ–¥–∞–º, –Ω–∏—á—å–∏–º, –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º."""
    data = load_blackjack_stats()
    players = []
    
    for user_id, stats in data["stats"].items():
        players.append({
            "user_id": int(user_id),
            "name": stats["name"],
            "wins": stats["wins"],
            "losses": stats["losses"],
            "draws": stats["draws"],
            "games": stats["games"]
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø–æ–±–µ–¥–∞–º (—É–±—ã–≤–∞–Ω–∏–µ), –ø–æ—Ç–æ–º –ø–æ –Ω–∏—á—å–∏–º (—É–±—ã–≤–∞–Ω–∏–µ), –ø–æ—Ç–æ–º –ø–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)
    players.sort(key=lambda x: (-x["wins"], -x["draws"], x["losses"]))
    
    return players

class BlackjackGame:
    """–ò–≥—Ä–∞ –≤ –±–ª–µ–∫–¥–∂–µ–∫"""
    
    def __init__(self, chat_id: int, admin_id: int):
        self.chat_id = chat_id
        self.admin_id = admin_id
        self.players: List[Player] = []
        self.deck: List[Card] = []
        self.dealer_cards: List[Card] = []
        self.dealer_score: int = 0
        self.is_signup_phase = True
        self.is_game_active = False
        self.signup_end_time = time.time() + GAME_SIGNUP_TIME
        self.signup_message_id: Optional[int] = None
        self.has_photo_message = False
        self.game_messages: List[int] = []  # ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.current_player_index: int = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        self.dealer_hidden_card: Optional[Card] = None  # –°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞
        self.player_ids: Set[int] = set()  # ID –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.is_betting_phase: bool = False  # —Ñ–∞–∑–∞ —Å—Ç–∞–≤–æ–∫
        self.current_betting_player: int = 0  # –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É
        
    def create_deck(self) -> List[Card]:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç"""
        suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        
        deck = []
        for suit in suits:
            for rank in ranks:
                if rank == 'A':
                    value = 11  # –¢—É–∑ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ 11, –ø–æ—Ç–æ–º –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å 1
                elif rank in ['J', 'Q', 'K']:
                    value = 10
                else:
                    value = int(rank)
                    
                deck.append(Card(suit, rank, value))
        
        random.shuffle(deck)
        return deck
    
    def calculate_score(self, cards: List[Card]) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç—É–∑–æ–≤"""
        score = sum(card.value for card in cards)
        aces = sum(1 for card in cards if card.rank == 'A')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç—É–∑—ã –∏–∑ 11 –≤ 1, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while score > 21 and aces > 0:
            score -= 10
            aces -= 1
            
        return score
    
    def add_player(self, user_id: int, username: str, first_name: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É"""
        if len(self.players) >= MAX_PLAYERS:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        for player in self.players:
            if player.user_id == user_id:
                return False
                
        self.players.append(Player(user_id, username, first_name))
        self.player_ids.add(user_id)
        return True
    
    def remove_player(self, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã"""
        for i, player in enumerate(self.players):
            if player.user_id == user_id:
                self.players.pop(i)
                self.player_ids.discard(user_id)
                return True
        return False
    
    def get_signup_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∏–≥—Ä—É"""
        button = InlineKeyboardButton(
            f"üé∞ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ {len(self.players)}/{MAX_PLAYERS}",
            callback_data=f"bj_join:{self.chat_id}"
        )
        return InlineKeyboardMarkup([[button]])
    
    def get_game_keyboard(self, player_index: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞"""
        hit_button = InlineKeyboardButton(
            "üÉè –í–∑—è—Ç—å –∫–∞—Ä—Ç—É",
            callback_data=f"bj_hit:{self.chat_id}:{player_index}"
        )
        stand_button = InlineKeyboardButton(
            "‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", 
            callback_data=f"bj_stand:{self.chat_id}:{player_index}"
        )
        return InlineKeyboardMarkup([[hit_button, stand_button]])
    
    def format_cards(self, cards: List[Card]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return " ".join(str(card) for card in cards)
    
    def format_dealer_cards(self, hide_second: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—å –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É)"""
        if not self.dealer_cards:
            return ""
        
        if hide_second and len(self.dealer_cards) >= 2:
            return f"{self.dealer_cards[0]} üÇ†"
        else:
            return " ".join(str(card) for card in self.dealer_cards)
    
    def start_game(self):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"""
        self.is_signup_phase = False
        self.is_game_active = True
        self.deck = self.create_deck()
        
        # –ü–µ—Ä–≤—ã–π –∫—Ä—É–≥ - –≤—Å–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ –æ—Ç–∫—Ä—ã—Ç–æ
        for player in self.players:
            card = self.deck.pop()
            player.cards.append(card)
        
        # –î–∏–ª–µ—Ä—É –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–æ
        dealer_first_card = self.deck.pop()
        self.dealer_cards.append(dealer_first_card)
        
        # –í—Ç–æ—Ä–æ–π –∫—Ä—É–≥ - –≤—Å–µ–º –ø–æ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç–µ –æ—Ç–∫—Ä—ã—Ç–æ
        for player in self.players:
            card = self.deck.pop()
            player.cards.append(card)
            player.score = self.calculate_score(player.cards)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–µ–∫–¥–∂–µ–∫
            if player.score == 21:
                player.is_blackjack = True
        
        # –î–∏–ª–µ—Ä—É –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–∫—Ä—ã—Ç–æ
        dealer_hidden_card = self.deck.pop()
        self.dealer_cards.append(dealer_hidden_card)
        self.dealer_hidden_card = dealer_hidden_card
        self.dealer_score = self.calculate_score(self.dealer_cards)
    
    def get_current_player(self) -> Optional[Player]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        if 0 <= self.current_player_index < len(self.players):
            return self.players[self.current_player_index]
        return None
    
    def next_player(self) -> bool:
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫"""
        self.current_player_index += 1
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –±–ª–µ–∫–¥–∂–µ–∫–æ–º –∏–ª–∏ –ø–µ—Ä–µ–±–æ—Ä–æ–º
        while (self.current_player_index < len(self.players) and 
               (self.players[self.current_player_index].is_blackjack or 
                self.players[self.current_player_index].is_bust or
                self.players[self.current_player_index].is_stand)):
            self.current_player_index += 1
        
        return self.current_player_index < len(self.players)
    
    def create_game_status_message(self) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã"""
        message = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ò–î–ï–¢**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        dealer_visible_score = self.dealer_cards[0].value if self.dealer_cards else 0
        message += f"üè¶ **–î–∏–ª–µ—Ä:** {self.format_dealer_cards()} (–æ—á–∫–∏: {dealer_visible_score}+?)\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
        message += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
        for i, player in enumerate(self.players):
            status_icon = ""
            if player.is_blackjack:
                status_icon = "üéØ"
            elif player.is_bust:
                status_icon = "üí•"
            elif player.is_stand:
                status_icon = "‚úã"
            elif i == self.current_player_index:
                status_icon = "üëâ"
            
            message += f"{status_icon} **{player.first_name}:** {self.format_cards(player.cards)} (–æ—á–∫–∏: {player.score})\n"
        
        current_player = self.get_current_player()
        if current_player:
            message += f"\nüéØ **–•–æ–¥ –∏–≥—Ä–æ–∫–∞:** {current_player.first_name}"
        
        return message

    def get_betting_keyboard(self, player_index: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞–≤–æ–∫"""
        from economy import get_user_balance, get_user_slave
        
        player = self.players[player_index]
        balance = get_user_balance(player.user_id)
        slave_info = get_user_slave(player.user_id)
        
        buttons = []
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∏—à–µ–∫
        chip_buttons = []
        for chip in [5, 25, 50]:
            if not player.slave_bet and balance >= player.temp_bet + chip:
                chip_buttons.append(InlineKeyboardButton(
                    f"üí∞ {chip}",
                    callback_data=f"bj_bet_add:{self.chat_id}:{player_index}:{chip}"
                ))
            else:
                chip_buttons.append(InlineKeyboardButton(
                    f"‚ùå {chip}",
                    callback_data="disabled"
                ))
        
        if slave_info and not player.slave_bet and player.temp_bet == 0:
            chip_buttons.append(InlineKeyboardButton(
                "üë§ –†–∞–±",
                callback_data=f"bj_bet_slave:{self.chat_id}:{player_index}"
            ))
        else:
            chip_buttons.append(InlineKeyboardButton(
                "‚ùå –†–∞–±",
                callback_data="disabled"
            ))
        
        buttons.append(chip_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        if player.temp_bet > 0 or player.slave_bet:
            control_buttons.append(InlineKeyboardButton(
                "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å",
                callback_data=f"bj_bet_reset:{self.chat_id}:{player_index}"
            ))
            control_buttons.append(InlineKeyboardButton(
                "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data=f"bj_bet_accept:{self.chat_id}:{player_index}"
            ))
        
        if control_buttons:
            buttons.append(control_buttons)
        
        return InlineKeyboardMarkup(buttons)

async def cb_blackjack_bet_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –∫ —Å—Ç–∞–≤–∫–µ"""
    from economy import get_user_balance
    
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str, player_index_str, chip_str = query.data.split(":")
        chat_id = int(chat_id_str)
        player_index = int(player_index_str)
        chip = int(chip_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (not game.is_betting_phase or 
        player_index != game.current_betting_player or 
        game.players[player_index].user_id != query.from_user.id):
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    player = game.players[player_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ–º
    if player.slave_bet:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∏ –∫ —Å—Ç–∞–≤–∫–µ —Ä–∞–±–æ–º!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(player.user_id)
    if balance < player.temp_bet + chip:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏—à–∫—É –∫ —Å—Ç–∞–≤–∫–µ
    player.temp_bet += chip
    await query.answer(f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ {chip} –º–æ–Ω–µ—Ç. –°—Ç–∞–≤–∫–∞: {player.temp_bet}", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_betting_message(context, game, player_index)

def create_signup_message(game: BlackjackGame, remaining_time: int) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    minutes = remaining_time // 60
    seconds = remaining_time % 60
    
    players_list = ""
    if game.players:
        players_list = "\n\nüë• **–ò–≥—Ä–æ–∫–∏:**\n"
        for i, player in enumerate(game.players, 1):
            balance = get_user_balance(player.user_id)
            players_list += f"{i}. {player.first_name} (üí∞ {balance} –º–æ–Ω–µ—Ç)\n"
    
    return (
        f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ù–ê–ë–û–† –ò–ì–†–û–ö–û–í**\n\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å: **{minutes:02d}:{seconds:02d}**\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: **{len(game.players)}/{MAX_PLAYERS}**\n"
        f"üéØ –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞: **{MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞**\n"
        f"üí∞ **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 20 –º–æ–Ω–µ—Ç**\n\n"
        f"üìã **–ü—Ä–∞–≤–∏–ª–∞:**\n"
        f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç (52 –∫–∞—Ä—Ç—ã)\n"
        f"‚Ä¢ –¶–µ–ª—å: –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ **–±–ª–∏–∑–∫–æ –∫ —ç—Ç–æ–º—É** –ø—É—Ç–µ–º –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É. –ï—Å–ª–∏ –≤—ã –ø—Ä–µ–≤—ã—Å–∏—Ç–µ 21 –æ—á–∫–æ - –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ (–ø–µ—Ä–µ–±–æ—Ä)\n"
        f"‚Ä¢ –¢—É–∑ = 1 –∏–ª–∏ 11, —Ñ–∏–≥—É—Ä—ã = 10\n"
        f"‚Ä¢ –ë–æ–ª—å—à–µ 21 = –ø—Ä–æ–∏–≥—Ä—ã—à\n\n"
        f"‚ö° **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:**\n"
        f"‚Ä¢ `/–±–ª–µ–∫–¥–∂–µ–∫+30—Å–µ–∫` - –¥–æ–±–∞–≤–∏—Ç—å 30 —Å–µ–∫—É–Ω–¥\n"
        f"‚Ä¢ `/–±–ª–µ–∫–¥–∂–µ–∫_–Ω–∞—á–∞—Ç—å` - –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ"
        f"{players_list}"
    )

async def cmd_blackjack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–±–ª–µ–∫–¥–∂–µ–∫ - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not update.message or not update.effective_user or not update.effective_chat:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await update.message.reply_text("‚ùå –ë–ª–µ–∫–¥–∂–µ–∫ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    if chat_id in active_games:
        await update.message.reply_text("üé∞ –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    game = BlackjackGame(chat_id, update.effective_user.id)
    active_games[chat_id] = game
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    keyboard = game.get_signup_keyboard()
    message_text = create_signup_message(game, 60)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ res
        photo_path = "res/list.jpg"
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                message = await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
                game.has_photo_message = True
        else:
            message = await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            game.has_photo_message = False
    except Exception as e:
        logger.warning(f"Failed to send photo, sending text message: {e}")
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        game.has_photo_message = False
    
    game.signup_message_id = message.message_id
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    asyncio.create_task(update_signup_timer(context, game))

async def cmd_blackjack_add_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–±–ª–µ–∫–¥–∂–µ–∫+30—Å–µ–∫ - –¥–æ–±–∞–≤–∏—Ç—å 30 —Å–µ–∫—É–Ω–¥ –∫ —Ç–∞–π–º–µ—Ä—É"""
    if not update.message or not update.effective_user or not update.effective_chat:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–ª–µ–∫–¥–∂–µ–∫!")
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –≤ —Ñ–∞–∑–µ –Ω–∞–±–æ—Ä–∞
    if not game.is_signup_phase:
        await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º 30 —Å–µ–∫—É–Ω–¥
    game.signup_end_time += 30
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete admin command: {e}")
    
    logger.info(f"Admin {update.effective_user.id} added 30 seconds to blackjack game in chat {chat_id}")

async def cmd_blackjack_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /–±–ª–µ–∫–¥–∂–µ–∫_–Ω–∞—á–∞—Ç—å - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ"""
    if not update.message or not update.effective_user or not update.effective_chat:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–ª–µ–∫–¥–∂–µ–∫!")
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –≤ —Ñ–∞–∑–µ –Ω–∞–±–æ—Ä–∞
    if not game.is_signup_phase:
        await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if len(game.players) < MIN_PLAYERS:
        await update.message.reply_text(f"‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete admin command: {e}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ–∞–∑—É –Ω–∞–±–æ—Ä–∞
    game.signup_end_time = time.time()
    
    logger.info(f"Admin {update.effective_user.id} force-started blackjack game in chat {chat_id}")

async def cb_blackjack_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str = query.data.split(":")
        chat_id = int(chat_id_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –≤ —Ñ–∞–∑–µ –Ω–∞–±–æ—Ä–∞
    if not game.is_signup_phase:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
        return
    
    user = query.from_user
    username = user.username or ""
    
    balance = get_user_balance(user.id)
    if balance < 20:
        await query.answer("‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", show_alert=True)
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
    if game.add_player(user.id, username, user.first_name):
        await query.answer(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!", show_alert=False)
        logger.info(f"Player {user.first_name} ({user.id}) joined blackjack game in chat {chat_id}")
        
        try:
            remaining_time = int(game.signup_end_time - time.time())
            keyboard = game.get_signup_keyboard()
            message_text = create_signup_message(game, remaining_time)
            
            if game.has_photo_message:
                await context.bot.edit_message_caption(
                    chat_id=game.chat_id,
                    message_id=game.signup_message_id,
                    caption=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=game.chat_id,
                    message_id=game.signup_message_id,
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"Failed to update signup message after player join: {e}")
            
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        for player in game.players:
            if player.user_id == user.id:
                await query.answer("‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
                return
        
        if len(game.players) >= MAX_PLAYERS:
            await query.answer("‚ùå –ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.", show_alert=True)
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!", show_alert=True)

async def cb_blackjack_hit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –∫–∞—Ä—Ç—É'"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str, player_index_str = query.data.split(":")
        chat_id = int(chat_id_str)
        player_index = int(player_index_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (player_index != game.current_player_index or 
        game.players[player_index].user_id != query.from_user.id):
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    player = game.players[player_index]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–î–æ—Å—Ç–∞—é –∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä–æ–∫–∞..."
    animation_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ò–î–ï–¢**\n\n"
    animation_text += f"üè¶ **–î–∏–ª–µ—Ä:** {game.format_dealer_cards()} (–æ—á–∫–∏: {game.dealer_cards[0].value}+?)\n\n"
    animation_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
    for i, p in enumerate(game.players):
        status_icon = ""
        if p.is_blackjack:
            status_icon = "üéØ"
        elif p.is_bust:
            status_icon = "üí•"
        elif p.is_stand:
            status_icon = "‚úã"
        elif i == game.current_player_index:
            status_icon = "üëâ"
        
        animation_text += f"{status_icon} **{p.first_name}:** {game.format_cards(p.cards)} (–æ—á–∫–∏: {p.score})\n"
    
    animation_text += f"\nüÉè **–î–æ—Å—Ç–∞—é –∫–∞—Ä—Ç—É –¥–ª—è {player.first_name}...**"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    if game.game_messages:
        try:
            await context.bot.edit_message_text(
                chat_id=game.chat_id,
                message_id=game.game_messages[-1],
                text=animation_text,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.warning(f"Failed to edit message with animation: {e}")
    
    await asyncio.sleep(2)
    
    # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
    if game.deck:
        card = game.deck.pop()
        player.cards.append(card)
        player.score = game.calculate_score(player.cards)
        
        if player.score > 21:
            player.is_bust = True
            await query.answer(f"üí• –ü–µ—Ä–µ–±–æ—Ä! –£ –≤–∞—Å {player.score} –æ—á–∫–æ–≤.", show_alert=True)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–±–æ–µ
            await continue_game(context, game)
        else:
            await query.answer(f"üÉè –í—ã –≤–∑—è–ª–∏ {card}. –û—á–∫–∏: {player.score}", show_alert=False)
            keyboard = game.get_game_keyboard(game.current_player_index)
            message_text = game.create_game_status_message()
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                await context.bot.edit_message_text(
                    chat_id=game.chat_id,
                    message_id=game.game_messages[-1],
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Failed to send updated game message: {e}")

async def cb_blackjack_stand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è'"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str, player_index_str = query.data.split(":")
        chat_id = int(chat_id_str)
        player_index = int(player_index_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (player_index != game.current_player_index or 
        game.players[player_index].user_id != query.from_user.id):
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    player = game.players[player_index]
    player.is_stand = True
    
    await query.answer(f"‚úã –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å —Å {player.score} –æ—á–∫–∞–º–∏.", show_alert=False)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    await continue_game(context, game)

async def continue_game(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É - –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å"""
    if game.next_player():
        current_player = game.get_current_player()
        if current_player:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
            transition_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ò–î–ï–¢**\n\n"
            transition_text += f"üè¶ **–î–∏–ª–µ—Ä:** {game.format_dealer_cards()} (–æ—á–∫–∏: {game.dealer_cards[0].value}+?)\n\n"
            transition_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
            for i, p in enumerate(game.players):
                status_icon = ""
                if p.is_blackjack:
                    status_icon = "üéØ"
                elif p.is_bust:
                    status_icon = "üí•"
                elif p.is_stand:
                    status_icon = "‚úã"
                elif i == game.current_player_index:
                    status_icon = "üëâ"
                
                transition_text += f"{status_icon} **{p.first_name}:** {game.format_cards(p.cards)} (–æ—á–∫–∏: {p.score})\n"
            
            transition_text += f"\nüîÑ **–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –∏–≥—Ä–æ–∫—É {current_player.first_name}...**"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∞
            if game.game_messages:
                try:
                    await context.bot.edit_message_text(
                        chat_id=game.chat_id,
                        message_id=game.game_messages[-1],
                        text=transition_text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.warning(f"Failed to edit message with transition: {e}")
            
            await asyncio.sleep(2)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            keyboard = game.get_game_keyboard(game.current_player_index)
            message_text = game.create_game_status_message()
            
            try:
                await context.bot.edit_message_text(
                    chat_id=game.chat_id,
                    message_id=game.game_messages[-1],
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Failed to send game message: {e}")
    else:
        # –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ–¥—ã, –∏–≥—Ä–∞–µ—Ç –¥–∏–ª–µ—Ä
        await dealer_turn(context, game)

async def dealer_turn(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–•–æ–¥ –¥–∏–ª–µ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∏–ª–µ—Ä—É
    transition_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –•–û–î –î–ò–õ–ï–†–ê**\n\n"
    transition_text += f"üè¶ **–î–∏–ª–µ—Ä:** {game.format_dealer_cards()} (–æ—á–∫–∏: {game.dealer_cards[0].value}+?)\n\n"
    transition_text += "üë• **–ò–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ–¥—ã:**\n"
    for player in game.players:
        status_icon = ""
        if player.is_blackjack:
            status_icon = "üéØ"
        elif player.is_bust:
            status_icon = "üí•"
        elif player.is_stand:
            status_icon = "‚úã"
        
        transition_text += f"{status_icon} **{player.first_name}:** {game.format_cards(player.cards)} (–æ—á–∫–∏: {player.score})\n"
    
    transition_text += f"\nüé≤ **–î–∏–ª–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã...**"
    
    if game.game_messages:
        try:
            await context.bot.edit_message_text(
                chat_id=game.chat_id,
                message_id=game.game_messages[-1],
                text=transition_text,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
    
    await asyncio.sleep(3)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
    game.dealer_score = game.calculate_score(game.dealer_cards)
    
    reveal_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –•–û–î –î–ò–õ–ï–†–ê**\n\n"
    reveal_text += f"üè¶ **–î–∏–ª–µ—Ä –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—ã:** {game.format_dealer_cards(hide_second=False)} (–æ—á–∫–∏: {game.dealer_score})\n\n"
    reveal_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
    for player in game.players:
        status_icon = ""
        if player.is_blackjack:
            status_icon = "üéØ"
        elif player.is_bust:
            status_icon = "üí•"
        elif player.is_stand:
            status_icon = "‚úã"
        
        reveal_text += f"{status_icon} **{player.first_name}:** {game.format_cards(player.cards)} (–æ—á–∫–∏: {player.score})\n"
    
    if game.dealer_score < 17:
        reveal_text += f"\nü§î **–í—ã–±–∏—Ä–∞—é –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É...**"
    elif game.dealer_score == 21:
        reveal_text += f"\nüéØ **–£ –¥–∏–ª–µ—Ä–∞ –±–ª–µ–∫–¥–∂–µ–∫!**"
    elif game.dealer_score > 21:
        reveal_text += f"\nüí• **–£ –¥–∏–ª–µ—Ä–∞ –ø–µ—Ä–µ–±–æ—Ä!**"
    else:
        reveal_text += f"\n‚úã **–î–∏–ª–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è**"
    
    try:
        await context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game.game_messages[-1],
            text=reveal_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to edit dealer reveal message: {e}")
    
    await asyncio.sleep(3)
    
    # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ–∫–∞ —É –Ω–µ–≥–æ –º–µ–Ω—å—à–µ 17
    while game.dealer_score < 17:
        if game.deck:
            # –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–æ–º
            taking_text = reveal_text + f"\n\nüÉè **–î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É...**"
            
            try:
                await context.bot.edit_message_text(
                    chat_id=game.chat_id,
                    message_id=game.game_messages[-1],
                    text=taking_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Failed to edit taking card message: {e}")
            
            await asyncio.sleep(2)
            
            # –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É
            card = game.deck.pop()
            game.dealer_cards.append(card)
            game.dealer_score = game.calculate_score(game.dealer_cards)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
            reveal_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –•–û–î –î–ò–õ–ï–†–ê**\n\n"
            reveal_text += f"üè¶ **–î–∏–ª–µ—Ä:** {game.format_dealer_cards(hide_second=False)} (–æ—á–∫–∏: {game.dealer_score})\n\n"
            reveal_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
            for player in game.players:
                status_icon = ""
                if player.is_blackjack:
                    status_icon = "üéØ"
                elif player.is_bust:
                    status_icon = "üí•"
                elif player.is_stand:
                    status_icon = "‚úã"
                
                reveal_text += f"{status_icon} **{player.first_name}:** {game.format_cards(player.cards)} (–æ—á–∫–∏: {player.score})\n"
            
            reveal_text += f"\nüÉè **–î–∏–ª–µ—Ä –≤–∑—è–ª:** {card}"
            
            if game.dealer_score > 21:
                reveal_text += f"\nüí• **–£ –¥–∏–ª–µ—Ä–∞ –ø–µ—Ä–µ–±–æ—Ä!**"
            elif game.dealer_score >= 17:
                reveal_text += f"\n‚úã **–î–∏–ª–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è**"
            else:
                reveal_text += f"\nü§î **–î–∏–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å –µ—â–µ...**"
            
            try:
                await context.bot.edit_message_text(
                    chat_id=game.chat_id,
                    message_id=game.game_messages[-1],
                    text=reveal_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Failed to edit dealer card message: {e}")
            
            await asyncio.sleep(3)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    final_dealer_text = reveal_text + f"\n\n‚è≥ **–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...**"
    
    try:
        await context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game.game_messages[-1],
            text=final_dealer_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to edit final dealer message: {e}")
    
    await asyncio.sleep(3)
    await end_game(context, game)

async def end_game(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    from economy import (get_user_balance, add_user_balance, get_user_slave, 
                        set_user_slave, remove_user_slave, get_slave_owner)
    
    results_message = "üé∞ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´**\n\n"
    results_message += f"üè¶ **–î–∏–ª–µ—Ä:** {game.format_dealer_cards(hide_second=False)} (–æ—á–∫–∏: {game.dealer_score})\n\n"
    
    results_message += "üë• **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:**\n"
    
    winners = []
    slave_players = []  # –∏–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞–±–æ–≤
    slave_participating = []  # —Ä–∞–±—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –∏–≥—Ä–∞—é—Ç
    
    for player in game.players:
        result_icon = ""
        result_text = ""
        is_winner = False
        result_type = "loss"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        
        if player.is_bust:
            result_icon = "üí•"
            result_text = "–ü–µ—Ä–µ–±–æ—Ä - –ü—Ä–æ–∏–≥—Ä—ã—à"
            result_type = "loss"
        elif player.is_blackjack and game.dealer_score != 21:
            result_icon = "üéØ"
            result_text = "–ë–ª–µ–∫–¥–∂–µ–∫ - –ü–æ–±–µ–¥–∞!"
            is_winner = True
            result_type = "win"
        elif game.dealer_score > 21:
            result_icon = "üèÜ"
            result_text = "–ü–æ–±–µ–¥–∞! (—É –¥–∏–ª–µ—Ä–∞ –ø–µ—Ä–µ–±–æ—Ä)"
            is_winner = True
            result_type = "win"
        elif player.score > game.dealer_score:
            result_icon = "üèÜ"
            result_text = "–ü–æ–±–µ–¥–∞!"
            is_winner = True
            result_type = "win"
        elif player.score == game.dealer_score:
            result_icon = "ü§ù"
            result_text = "–ù–∏—á—å—è"
            result_type = "draw"
        else:
            result_icon = "üòû"
            result_text = "–ü—Ä–æ–∏–≥—Ä—ã—à"
            result_type = "loss"
        
        if is_winner:
            winners.append(player)
        
        if player.slave_bet:
            slave_players.append(player)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞–±–æ–º
        if get_slave_owner(player.user_id):
            slave_participating.append(player)
        
        update_player_stats(player.user_id, result_type, player.first_name)
        
        results_message += f"{result_icon} **{player.first_name}:** {game.format_cards(player.cards)} ({player.score}) - {result_text}\n"
    
    try:
        await context.bot.send_message(
            chat_id=game.chat_id,
            text=results_message,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to send results message: {e}")
    
    try:
        await process_game_results(context, game, winners, slave_players, slave_participating)
    except Exception as e:
        logger.error(f"Error processing game results: {e}")
    
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    if game.chat_id in active_games:
        del active_games[game.chat_id]
        logger.info(f"Game cleanup completed for chat {game.chat_id}")

async def process_game_results(context, game, winners, slave_players, slave_participating):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ–≤"""
    from economy import (add_user_balance, get_user_slave, set_user_slave, 
                        remove_user_slave, get_slave_owner)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for player in game.players:
        if not player.slave_bet:  # —Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            if player.is_blackjack and game.dealer_score != 21:
                add_user_balance(player.user_id, int(player.bet * 2.5))
            elif game.dealer_score > 21 and not player.is_bust:
                add_user_balance(player.user_id, player.bet * 2)
            elif player.score > game.dealer_score and not player.is_bust:
                add_user_balance(player.user_id, player.bet * 2)
            elif player.score == game.dealer_score and not player.is_bust:
                add_user_balance(player.user_id, player.bet)
    
    # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ —Ä–∞–±–∞–º–∏ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
    for slave_player in slave_players:
        slave_info = slave_player.slave_bet_info
        if not slave_info:
            continue
            
        slave_id = slave_info["slave_id"]
        slave_name = slave_info["slave_name"]
        purchase_price = slave_info["purchase_price"]
        owner = slave_player  # —Ö–æ–∑—è–∏–Ω
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–± –≤ –∏–≥—Ä–µ –∫–∞–∫ –∏–≥—Ä–æ–∫
        slave_as_player = next((p for p in game.players if p.user_id == slave_id), None)
        slave_is_winner = slave_as_player and slave_as_player in winners
        
        slave_has_tie = slave_as_player and not slave_as_player.is_bust and slave_as_player.score == game.dealer_score
        
        if slave_has_tie:
            set_user_slave(owner.user_id, slave_id, purchase_price, slave_name)
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=f"ü§ù –†–∞–± {slave_name} —Å—ã–≥—Ä–∞–ª –≤–Ω–∏—á—å—é —Å –¥–∏–ª–µ—Ä–æ–º - –æ—Å—Ç–∞–µ—Ç—Å—è —É —Ö–æ–∑—è–∏–Ω–∞ {owner.first_name}"
            )
            continue
        
        if not winners:  # –¥–∏–ª–µ—Ä –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            set_user_slave(owner.user_id, slave_id, purchase_price, slave_name)
            # –•–æ–∑—è–∏–Ω—É –≤—ã–¥–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞
            add_user_balance(owner.user_id, -purchase_price)  # –æ—Ç–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ (—à—Ç—Ä–∞—Ñ)
            
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=f"üè¶ –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª! –†–∞–± {slave_name} –æ—Å—Ç–∞–µ—Ç—Å—è —É —Ö–æ–∑—è–∏–Ω–∞ {owner.first_name}, –Ω–æ —Ö–æ–∑—è–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {purchase_price} –º–æ–Ω–µ—Ç"
            )
            continue
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–∞–º —Ä–∞–± - –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–≤–æ–±–æ–¥—É
        if slave_is_winner:
            # –†–∞–± –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥—É
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=f"üéâ –†–∞–± {slave_name} –≤—ã–∏–≥—Ä–∞–ª –∏ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–±–æ–¥—É!"
            )
            try:
                await context.bot.send_message(
                    chat_id=slave_id,
                    text=f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –±–ª–µ–∫–¥–∂–µ–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–±–æ–¥—É!"
                )
            except:
                pass
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ —Ä–∞–±–∞) –ø–æ–ª—É—á–∞—é—Ç –¥–µ–Ω—å–≥–∏ –ø–æ—Ä–æ–≤–Ω—É
            other_winners = [w for w in winners if w.user_id != slave_id]
            if other_winners:
                share_per_winner = purchase_price // len(other_winners)
                for winner in other_winners:
                    add_user_balance(winner.user_id, share_per_winner)
                
                await context.bot.send_message(
                    chat_id=game.chat_id,
                    text=f"üí∞ {len(other_winners)} –¥—Ä—É–≥–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –ø–æ {share_per_winner} –º–æ–Ω–µ—Ç –∑–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–∞"
                )
            continue
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–¥–∏–Ω –∏ —ç—Ç–æ —Ö–æ–∑—è–∏–Ω - –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–∞ –æ–±—Ä–∞—Ç–Ω–æ + –¥–µ–Ω—å–≥–∏
        if len(winners) == 1 and winners[0] == owner:
            set_user_slave(owner.user_id, slave_id, purchase_price, slave_name)
            # –î–µ–Ω–µ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –≤—ã—à–µ
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=f"üèÜ {owner.first_name} –≤—ã–∏–≥—Ä–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–±–µ —Ä–∞–±–∞ {slave_name}!"
            )
            continue
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–¥–∏–Ω –∏ –æ–Ω –ù–ï –±–æ—Ç –∏ –ù–ï —Ä–∞–± - –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–∞
        if len(winners) == 1:
            winner = winners[0]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ —Ä–∞–±
            if not get_slave_owner(winner.user_id):
                set_user_slave(winner.user_id, slave_id, purchase_price, slave_name)
                await context.bot.send_message(
                    chat_id=game.chat_id,
                    text=f"üëë {winner.first_name} –≤—ã–∏–≥—Ä–∞–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–∞ {slave_name}!"
                )
                try:
                    await context.bot.send_message(
                        chat_id=slave_id,
                        text=f"‚õìÔ∏è –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ö–æ–∑—è–∏–Ω: {winner.first_name}!"
                    )
                except:
                    pass
                continue
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Ä–∞–± —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –¥–µ–Ω—å–≥–∏
        # –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ–ª—é –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–∞
        if winners:
            share_per_winner = purchase_price // len(winners)
            for winner in winners:
                add_user_balance(winner.user_id, share_per_winner)
            
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=f"üí∞ {len(winners)} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –ø–æ {share_per_winner} –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–±–∞ {slave_name}"
            )


async def show_betting_for_player(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame, player_index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
    from economy import get_user_balance, get_user_slave
    
    player = game.players[player_index]
    balance = get_user_balance(player.user_id)
    slave_info = get_user_slave(player.user_id)
    
    betting_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –°–¢–ê–í–ö–ò**\n\n"
    betting_text += f"üë§ **–•–æ–¥ –∏–≥—Ä–æ–∫–∞:** {player.first_name}\n"
    betting_text += f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} –º–æ–Ω–µ—Ç\n"
    
    if player.slave_bet and player.slave_bet_info:
        betting_text += f"üë§ **–°—Ç–∞–≤–∫–∞:** –†–∞–± {player.slave_bet_info['slave_name']}\n\n"
    else:
        betting_text += f"üéØ **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:** {player.temp_bet} –º–æ–Ω–µ—Ç\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞–≤–∫–∏
    betting_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
    for i, p in enumerate(game.players):
        if i < player_index:
            if p.slave_bet and p.slave_bet_info:
                betting_text += f"‚úÖ **{p.first_name}:** –†–∞–± {p.slave_bet_info['slave_name']}\n"
            else:
                betting_text += f"‚úÖ **{p.first_name}:** {p.bet} –º–æ–Ω–µ—Ç\n"
        elif i == player_index:
            betting_text += f"üëâ **{p.first_name}:** –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É...\n"
        else:
            betting_text += f"‚è≥ **{p.first_name}:** –æ–∂–∏–¥–∞–µ—Ç\n"
    
    betting_text += f"\nüí° **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—à–∫–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏:**"
    
    keyboard = game.get_betting_keyboard(player_index)
    
    try:
        betting_msg = await context.bot.send_message(
            chat_id=game.chat_id,
            text=betting_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        game.game_messages.append(betting_msg.message_id)
    except Exception as e:
        logger.error(f"Failed to send betting message: {e}")

async def cb_blackjack_bet_slave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ–º"""
    from economy import get_user_slave, remove_user_slave
    
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str, player_index_str = query.data.split(":")
        chat_id = int(chat_id_str)
        player_index = int(player_index_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (not game.is_betting_phase or 
        player_index != game.current_betting_player or 
        game.players[player_index].user_id != query.from_user.id):
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    player = game.players[player_index]
    slave_info = get_user_slave(player.user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–±
    if not slave_info:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–∞!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–µ–Ω–µ–∂–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    if player.temp_bet > 0:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ä–∞–±–∞ –≤–º–µ—Å—Ç–µ —Å –¥–µ–Ω—å–≥–∞–º–∏!", show_alert=True)
        return
    
    # –°—Ç–∞–≤–∏–º —Ä–∞–±–∞
    player.slave_bet = True
    player.slave_bet_info = slave_info.copy()
    
    # –ó–∞–±–∏—Ä–∞–µ–º —Ä–∞–±–∞ —É –∏–≥—Ä–æ–∫–∞
    remove_user_slave(player.user_id)
    
    await query.answer(f"üë§ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–±: {slave_info['slave_name']}", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_betting_message(context, game, player_index)

async def update_betting_message(context, game, player_index):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫"""
    from economy import get_user_balance, get_user_slave
    
    player = game.players[player_index]
    balance = get_user_balance(player.user_id)
    
    betting_text = f"üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –°–¢–ê–í–ö–ò**\n\n"
    betting_text += f"üë§ **–•–æ–¥ –∏–≥—Ä–æ–∫–∞:** {player.first_name}\n"
    betting_text += f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} –º–æ–Ω–µ—Ç\n"
    
    if player.slave_bet and player.slave_bet_info:
        betting_text += f"üë§ **–°—Ç–∞–≤–∫–∞:** –†–∞–± {player.slave_bet_info['slave_name']}\n\n"
    else:
        betting_text += f"üéØ **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:** {player.temp_bet} –º–æ–Ω–µ—Ç\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞–≤–∫–∏
    betting_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
    for i, p in enumerate(game.players):
        if i < player_index:
            if p.slave_bet and p.slave_bet_info:
                betting_text += f"‚úÖ **{p.first_name}:** –†–∞–± {p.slave_bet_info['slave_name']}\n"
            else:
                betting_text += f"‚úÖ **{p.first_name}:** {p.bet} –º–æ–Ω–µ—Ç\n"
        elif i == player_index:
            betting_text += f"üëâ **{p.first_name}:** –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É...\n"
        else:
            betting_text += f"‚è≥ **{p.first_name}:** –æ–∂–∏–¥–∞–µ—Ç\n"
    
    betting_text += f"\nüí° **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—à–∫–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏:**"
    
    keyboard = game.get_betting_keyboard(player_index)
    
    try:
        await context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game.game_messages[-1],
            text=betting_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to update betting message: {e}")

async def cb_blackjack_bet_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞–≤–∫–∏"""
    from economy import get_user_balance, set_user_slave
    
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str, player_index_str = query.data.split(":")
        chat_id = int(chat_id_str)
        player_index = int(player_index_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (not game.is_betting_phase or 
        player_index != game.current_betting_player or 
        game.players[player_index].user_id != query.from_user.id):
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    player = game.players[player_index]
    
    if player.slave_bet and player.slave_bet_info:
        slave_info = player.slave_bet_info
        set_user_slave(player.user_id, slave_info["slave_id"], 
                      slave_info["purchase_price"], slave_info["slave_name"])
        player.slave_bet = False
        player.slave_bet_info = None
        await query.answer("üóëÔ∏è –°—Ç–∞–≤–∫–∞ —Ä–∞–±–∞ —Å–±—Ä–æ—à–µ–Ω–∞!", show_alert=False)
    else:
        player.temp_bet = 0
        await query.answer("üóëÔ∏è –°—Ç–∞–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_betting_message(context, game, player_index)

async def cb_blackjack_bet_accept(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ç–∞–≤–∫–∏"""
    from economy import get_user_balance, add_user_balance
    
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, chat_id_str, player_index_str = query.data.split(":")
        chat_id = int(chat_id_str)
        player_index = int(player_index_str)
    except (ValueError, IndexError):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if chat_id not in active_games:
        await query.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    game = active_games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (not game.is_betting_phase or 
        player_index != game.current_betting_player or 
        game.players[player_index].user_id != query.from_user.id):
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    player = game.players[player_index]
    
    if player.slave_bet:
        # –°—Ç–∞–≤–∫–∞ —Ä–∞–±–æ–º
        if not player.slave_bet_info:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–∞!", show_alert=True)
            return
        
        player.bet = player.slave_bet_info["purchase_price"]  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await query.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–±–æ–º {player.slave_bet_info['slave_name']} –ø—Ä–∏–Ω—è—Ç–∞!", show_alert=False)
    else:
        # –î–µ–Ω–µ–∂–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        if player.temp_bet <= 0:
            await query.answer("‚ùå –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º!", show_alert=True)
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
        if not add_user_balance(player.user_id, -player.temp_bet):
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return
        
        player.bet = player.temp_bet
        await query.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ {player.bet} –º–æ–Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞!", show_alert=False)
    
    player.temp_bet = 0
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    game.current_betting_player += 1
    
    if game.current_betting_player >= len(game.players):
        # –í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        game.is_betting_phase = False
        await animated_card_dealing(context, game)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        try:
            await context.bot.delete_message(
                chat_id=game.chat_id,
                message_id=game.game_messages[-1]
            )
            game.game_messages.pop()
        except Exception as e:
            logger.warning(f"Failed to delete betting message: {e}")
        
        await show_betting_for_player(context, game, game.current_betting_player)

async def animated_card_dealing(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ –∏–≥—Ä–æ–∫–æ–≤
        await context.bot.delete_message(
            chat_id=game.chat_id,
            message_id=game.signup_message_id
        )
    except Exception as e:
        logger.warning(f"Failed to delete signup message: {e}")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    initial_text = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!**\n\n–†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç..."
    
    try:
        game_msg = await context.bot.send_message(
            chat_id=game.chat_id,
            text=initial_text,
            parse_mode=ParseMode.MARKDOWN
        )
        game.game_messages.append(game_msg.message_id)
    except Exception as e:
        logger.error(f"Failed to send initial message: {e}")
        return
    
    await asyncio.sleep(3)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    game.is_signup_phase = False
    game.is_game_active = True
    game.deck = game.create_deck()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    players_text = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!**\n\nüë• **–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏:**\n"
    for player in game.players:
        players_text += f"‚Ä¢ **{player.first_name}:** \n"
    
    try:
        await context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game_msg.message_id,
            text=players_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to edit message: {e}")
    
    await asyncio.sleep(2)
    
    # –ü–µ—Ä–≤—ã–π –∫—Ä—É–≥ - —Ä–∞–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    for i, player in enumerate(game.players):
        card = game.deck.pop()
        player.cards.append(card)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
        updated_text = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!**\n\nüë• **–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏:**\n"
        for j, p in enumerate(game.players):
            if j <= i:
                updated_text += f"‚Ä¢ **{p.first_name}:** {game.format_cards(p.cards)}\n"
            else:
                updated_text += f"‚Ä¢ **{p.first_name}:** \n"
        
        try:
            await context.bot.edit_message_text(
                chat_id=game.chat_id,
                message_id=game_msg.message_id,
                text=updated_text,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
        
        await asyncio.sleep(1.5)
    
    # –î–∏–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
    dealer_first_card = game.deck.pop()
    game.dealer_cards.append(dealer_first_card)
    
    updated_text = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!**\n\n"
    updated_text += f"üè¶ **–î–∏–ª–µ—Ä:** {dealer_first_card}\n\n"
    updated_text += "üë• **–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏:**\n"
    for player in game.players:
        updated_text += f"‚Ä¢ **{player.first_name}:** {game.format_cards(p.cards)}\n"
    
    try:
        await context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game_msg.message_id,
            text=updated_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to edit message: {e}")
    
    await asyncio.sleep(2)
    
    # –í—Ç–æ—Ä–æ–π –∫—Ä—É–≥ - —Ä–∞–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞–º
    for i, player in enumerate(game.players):
        card = game.deck.pop()
        player.cards.append(card)
        player.score = game.calculate_score(player.cards)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–µ–∫–¥–∂–µ–∫
        if player.score == 21:
            player.is_blackjack = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_text = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!**\n\n"
        updated_text += f"üè¶ **–î–∏–ª–µ—Ä:** {dealer_first_card} + üÇ†\n\n"
        updated_text += "üë• **–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏:**\n"
        for j, p in enumerate(game.players):
            if j <= i:
                cards_text = game.format_cards(p.cards)
                score_text = f" (–æ—á–∫–∏: {p.score})"
                if p.is_blackjack:
                    score_text += " üéØ"
                updated_text += f"‚Ä¢ **{p.first_name}:** {cards_text}{score_text}\n"
            else:
                updated_text += f"‚Ä¢ **{p.first_name}:** {game.format_cards(p.cards)}\n"
        
        try:
            await context.bot.edit_message_text(
                chat_id=game.chat_id,
                message_id=game_msg.message_id,
                text=updated_text,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
        
        await asyncio.sleep(1.5)
    
    # –î–∏–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É (—Å–∫—Ä—ã—Ç—É—é)
    dealer_hidden_card = game.deck.pop()
    game.dealer_cards.append(dealer_hidden_card)
    game.dealer_hidden_card = dealer_hidden_card
    game.dealer_score = game.calculate_score(game.dealer_cards)
    
    await asyncio.sleep(2)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–¥–∞—á–µ
    final_text = "üé∞ **–ë–õ–ï–ö–î–ñ–ï–ö - –†–ê–ó–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
    final_text += f"üè¶ **–î–∏–ª–µ—Ä:** {dealer_first_card} + üÇ†\n\n"
    final_text += "üë• **–ò–≥—Ä–æ–∫–∏:**\n"
    for player in game.players:
        cards_text = game.format_cards(player.cards)
        score_text = f" (–æ—á–∫–∏: {player.score})"
        if player.is_blackjack:
            score_text += " üéØ"
        final_text += f"‚Ä¢ **{player.first_name}:** {cards_text}{score_text}\n"
    
    try:
        await context.bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game_msg.message_id,
            text=final_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to edit message: {e}")
    
    await asyncio.sleep(3)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤
    current_player = game.get_current_player()
    if current_player and not current_player.is_blackjack:
        keyboard = game.get_game_keyboard(game.current_player_index)
        message_text = game.create_game_status_message()
        
        try:
            msg = await context.bot.send_message(
                chat_id=game.chat_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            game.game_messages.append(msg.message_id)
        except Exception as e:
            logger.error(f"Failed to send game message: {e}")
    else:
        # –ï—Å–ª–∏ —É –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±–ª–µ–∫–¥–∂–µ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        await continue_game(context, game)

async def update_signup_timer(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–û–±–Ω–æ–≤–ª—è—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    while game.is_signup_phase and time.time() < game.signup_end_time:
        remaining_time = int(game.signup_end_time - time.time())
        
        if remaining_time <= 0:
            break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        if remaining_time % 5 == 0 or remaining_time <= 10:
            try:
                keyboard = game.get_signup_keyboard()
                message_text = create_signup_message(game, remaining_time)
                
                if game.has_photo_message:
                    await context.bot.edit_message_caption(
                        chat_id=game.chat_id,
                        message_id=game.signup_message_id,
                        caption=message_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await context.bot.edit_message_text(
                        chat_id=game.chat_id,
                        message_id=game.signup_message_id,
                        text=message_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except Exception as e:
                logger.warning(f"Failed to update signup message: {e}")
        
        await asyncio.sleep(1)
    
    # –í—Ä–µ–º—è –≤—ã—à–ª–æ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –¥–æ—Å—Ä–æ—á–Ω–æ
    if game.is_signup_phase:
        await end_signup_phase(context, game)

async def end_signup_phase(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–∞–∑—É –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    if len(game.players) < MIN_PLAYERS:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ - –æ—Ç–º–µ–Ω—è–µ–º –∏–≥—Ä—É
        cancel_text = f"‚ùå **–ò–ì–†–ê –û–¢–ú–ï–ù–ï–ù–ê**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!\n–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞, –∑–∞–ø–∏—Å–∞–ª–æ—Å—å: {len(game.players)}"
        
        try:
            if game.has_photo_message:
                await context.bot.edit_message_caption(
                    chat_id=game.chat_id,
                    message_id=game.signup_message_id,
                    caption=cancel_text,
                    reply_markup=None,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=game.chat_id,
                    message_id=game.signup_message_id,
                    text=cancel_text,
                    reply_markup=None,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"Failed to send cancel message: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if game.chat_id in active_games:
            del active_games[game.chat_id]
        
        logger.info(f"Blackjack game cancelled in chat {game.chat_id} - not enough players")
        return
    
    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
    game.is_signup_phase = False
    game.is_betting_phase = True
    game.current_betting_player = 0
    
    logger.info(f"Starting betting phase for blackjack game in chat {game.chat_id} with {len(game.players)} players")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    await show_betting_for_player(context, game, 0)

async def message_filter_task(context: ContextTypes.DEFAULT_TYPE, game: BlackjackGame):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ main.py
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
    pass

async def delete_non_game_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ —Ç–µ–º–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ —Ç–µ–º–µ
    # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    # –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∏–≥—Ä–æ–π
    pass

def is_game_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ —á–∞—Ç–µ"""
    return chat_id in active_games and active_games[chat_id].is_game_active

def is_player_in_game(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–æ–∫–æ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ"""
    if chat_id not in active_games:
        return False
    return user_id in active_games[chat_id].player_ids
