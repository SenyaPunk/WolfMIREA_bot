"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
import re
from datetime import datetime
from typing import Optional


def safe_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã."""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")


def mention_html(user_id: int, name: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HTML —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f'<a href="tg://user?id={user_id}">{safe_html(name)}</a>'


def display_name_from_user(user) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if getattr(user, "full_name", ""):
        return user.full_name
    if getattr(user, "username", ""):
        return f"@{user.username}"
    return f"User {getattr(user, "id", "???")}"


def normalize_cmd_name(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã."""
    s = s.strip()
    if s.startswith("/"):
        s = s[1:]
    if "@" in s:
        s = s.split("@", 1)[0]
    return s.strip().lower()


def parse_time_hhmm(s: str) -> Optional[datetime]:
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM."""
    if not re.match(r"^\d{1,2}:\d{2}$", s):
        return None
    try:
        h, m = map(int, s.split(":"))
        if not (0 <= h <= 23 and 0 <= m <= 59):
            return None
        return datetime.now().replace(hour=h, minute=m, second=0, microsecond=0)
    except ValueError:
        return None


def build_caption(kind: str, text: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–∞."""
    emoji = "üåÖ" if kind == "morning" else "üåô"
    return f"{emoji} {text}"


def format_timestamp(ts: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    try:
        dt = datetime.fromtimestamp(ts)
        return dt.strftime("%d.%m.%Y")
    except Exception:
        return str(ts)


def get_target_user(message, args):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã."""
    if not message:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message
    if message.reply_to_message and message.reply_to_message.from_user:
        return message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º entities –Ω–∞ text_mention –∏ mention
    if message.entities:
        for entity in message.entities:
            if entity.type == "text_mention" and entity.user:
                return entity.user
            elif entity.type == "mention":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                start = entity.offset
                length = entity.length
                username = message.text[start:start + length]
                if username.startswith('@'):
                    username = username[1:]  # –£–±–∏—Ä–∞–µ–º @
                
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å username –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                class UserStub:
                    def __init__(self, username):
                        self.username = username
                        self.id = None
                        self.first_name = f"@{username}"
                        self.full_name = f"@{username}"
                
                return UserStub(username)
    
    return None
