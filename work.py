import time
import random
import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatType
from telegram.ext import ContextTypes

from storage import load_cooldowns, save_cooldowns
from economy import add_user_balance, get_slave_owner
from utils import safe_html

logger = logging.getLogger(__name__)

# –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
WORK_COOLDOWN = 14400  # 4 —á–∞—Å–∞
WORK_TIME_LIMIT = 30   # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
REQUIRED_CLICKS = 10   # –ù—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 10 —Ä–∞–∑
MIN_REWARD = 5        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
MAX_REWARD = 80       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
REWARD_DELAY = 3600    # –ß–∞—Å –¥–æ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞–≥—Ä–∞–¥—ã
SLAVE_TAX_PERCENT = 10  # –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞ —Å —Ä–∞–±–æ–≤ –¥–ª—è —Ö–æ–∑—è–∏–Ω–∞

def get_work_cooldown_key(user_id: int, chat_id: int) -> str:
    return f"work_{user_id}_{chat_id}"

def get_work_session_key(user_id: int, chat_id: int) -> str:
    return f"work_session_{user_id}_{chat_id}"

def check_work_cooldown(user_id: int, chat_id: int) -> Optional[float]:
    cooldowns = load_cooldowns()
    key = get_work_cooldown_key(user_id, chat_id)
    
    if key not in cooldowns:
        return None
    
    last_work = cooldowns[key].get("last_work", 0)
    current_time = time.time()
    time_passed = current_time - last_work
    
    if time_passed >= WORK_COOLDOWN:
        return None
    
    return WORK_COOLDOWN - time_passed

def set_work_cooldown(user_id: int, chat_id: int) -> None:
    cooldowns = load_cooldowns()
    key = get_work_cooldown_key(user_id, chat_id)
    
    if key not in cooldowns:
        cooldowns[key] = {}
    
    cooldowns[key]["last_work"] = time.time()
    save_cooldowns(cooldowns)

def start_work_session(user_id: int, chat_id: int) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é"""
    cooldowns = load_cooldowns()
    key = get_work_session_key(user_id, chat_id)
    
    if key not in cooldowns:
        cooldowns[key] = {}
    
    cooldowns[key]["start_time"] = time.time()
    cooldowns[key]["clicks"] = 0
    cooldowns[key]["active"] = True
    save_cooldowns(cooldowns)

def get_work_session(user_id: int, chat_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏"""
    cooldowns = load_cooldowns()
    key = get_work_session_key(user_id, chat_id)
    
    if key not in cooldowns:
        return {"active": False, "clicks": 0, "start_time": 0}
    
    return cooldowns[key]

def add_work_click(user_id: int, chat_id: int) -> dict:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–∫ –≤ —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é"""
    cooldowns = load_cooldowns()
    key = get_work_session_key(user_id, chat_id)
    
    if key not in cooldowns:
        return {"active": False, "clicks": 0, "start_time": 0}
    
    session = cooldowns[key]
    if not session.get("active", False):
        return session
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    current_time = time.time()
    if current_time - session.get("start_time", 0) > WORK_TIME_LIMIT:
        session["active"] = False
        save_cooldowns(cooldowns)
        return session
    
    session["clicks"] = session.get("clicks", 0) + 1
    save_cooldowns(cooldowns)
    return session

def end_work_session(user_id: int, chat_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é"""
    cooldowns = load_cooldowns()
    key = get_work_session_key(user_id, chat_id)
    
    if key in cooldowns:
        cooldowns[key]["active"] = False
        save_cooldowns(cooldowns)

def schedule_reward(user_id: int, chat_id: int, reward: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É –Ω–∞–≥—Ä–∞–¥—ã —á–µ—Ä–µ–∑ —á–∞—Å"""
    async def pay_reward(context):
        try:
            owner_id = get_slave_owner(user_id)
            
            if owner_id:
                # –†–∞–±–æ—Ç–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ–º - –æ—Ç–¥–∞–µ–º 10% —Ö–æ–∑—è–∏–Ω—É
                slave_tax = int(reward * SLAVE_TAX_PERCENT / 100)
                slave_reward = reward - slave_tax
                
                # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ä–∞–±—É
                add_user_balance(user_id, slave_reward)
                
                # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –Ω–∞–ª–æ–≥ —Ö–æ–∑—è–∏–Ω—É
                add_user_balance(owner_id, slave_tax)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–∞
                await context.bot.send_message(
                    chat_id,
                    f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
                    f"üë§ <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n"
                    f"üíµ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {reward} –º–æ–Ω–µ—Ç\n"
                    f"üí∞ <b>–í–∞–º:</b> {slave_reward} –º–æ–Ω–µ—Ç\n"
                    f"üëë <b>–•–æ–∑—è–∏–Ω—É:</b> {slave_tax} –º–æ–Ω–µ—Ç ({SLAVE_TAX_PERCENT}%)\n"
                    f"‚è∞ <b>–ó–∞ —Ä–∞–±–æ—Ç—É —á–∞—Å –Ω–∞–∑–∞–¥</b>",
                    parse_mode=ParseMode.HTML
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ö–æ–∑—è–∏–Ω–∞ –æ –¥–æ—Ö–æ–¥–µ —Å —Ä–∞–±–∞
                try:
                    await context.bot.send_message(
                        owner_id,
                        f"üíé <b>–î–æ—Ö–æ–¥ —Å —Ä–∞–±–∞!</b>\n\n"
                        f"üë§ <b>–í–∞—à —Ä–∞–±:</b> <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n"
                        f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–ª:</b> {reward} –º–æ–Ω–µ—Ç\n"
                        f"üíµ <b>–í–∞—à–∞ –¥–æ–ª—è:</b> {slave_tax} –º–æ–Ω–µ—Ç ({SLAVE_TAX_PERCENT}%)\n"
                        f"‚è∞ <b>–ó–∞ —Ä–∞–±–æ—Ç—É —á–∞—Å –Ω–∞–∑–∞–¥</b>",
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.warning(f"Failed to notify slave owner {owner_id}: {e}")
                
                logger.info(f"Work reward paid: {slave_reward} coins to slave {user_id}, {slave_tax} coins to owner {owner_id} in chat {chat_id}")
            else:
                # –û–±—ã—á–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫
                add_user_balance(user_id, reward)
                await context.bot.send_message(
                    chat_id,
                    f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
                    f"üë§ <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n"
                    f"üíµ <b>–°—É–º–º–∞:</b> {reward} –º–æ–Ω–µ—Ç\n"
                    f"‚è∞ <b>–ó–∞ —Ä–∞–±–æ—Ç—É —á–∞—Å –Ω–∞–∑–∞–¥</b>",
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"Work reward paid: {reward} coins to user {user_id} in chat {chat_id}")
                
        except Exception as e:
            logger.error(f"Failed to pay work reward: {e}")
    
    context.job_queue.run_once(pay_reward, REWARD_DELAY)

def format_time_remaining(seconds: float) -> str:
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    
    if hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    else:
        return f"{minutes} –º–∏–Ω."

def create_work_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
    button = InlineKeyboardButton(
        "üî® –†–∞–±–æ—Ç–∞—Ç—å", 
        callback_data=f"work_click:{user_id}"
    )
    return InlineKeyboardMarkup([[button]])

async def cmd_work(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /work"""
    message = update.message
    if not message or not update.effective_user:
        return
    
    user = update.effective_user
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    remaining_time = check_work_cooldown(user.id, chat_id)
    if remaining_time is not None:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Failed to delete user message: %s", e)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_msg = await context.bot.send_message(
            chat_id,
            f"üö´ <b>–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ!</b>\n\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ —á–µ—Ä–µ–∑ {format_time_remaining(remaining_time)}\n"
            f"üí° <i>–ù—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏...</i>",
            parse_mode=ParseMode.HTML
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        async def delete_warning(context):
            try:
                await context.bot.delete_message(chat_id, warning_msg.message_id)
            except Exception as e:
                logger.warning("Failed to delete warning message: %s", e)
        
        context.job_queue.run_once(delete_warning, 3)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
    set_work_cooldown(user.id, chat_id)
    start_work_session(user.id, chat_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–±–æ—Ç—ã
    keyboard = create_work_keyboard(user.id)
    
    work_msg = await message.reply_text(
        f"üè≠ <b>–†–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
        f"üë§ <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> {safe_html(user.first_name)}\n"
        f"üéØ <b>–ó–∞–¥–∞—á–∞:</b> –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ä–æ–≤–Ω–æ {REQUIRED_CLICKS} —Ä–∞–∑\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {WORK_TIME_LIMIT} —Å–µ–∫—É–Ω–¥\n"
        f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {MIN_REWARD}-{MAX_REWARD} –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ —á–∞—Å)\n\n"
        f"üî• <b>–ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 35 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    async def cleanup_work_message(context):
        try:
            session = get_work_session(user.id, chat_id)
            if session.get("active", False):
                end_work_session(user.id, chat_id)
                await context.bot.edit_message_text(
                    f"‚è∞ <b>–í—Ä–µ–º—è –≤—ã—à–ª–æ!</b>\n\n"
                    f"‚ùå {safe_html(user.first_name)} –Ω–µ —É—Å–ø–µ–ª(–∞) –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
                    f"üìä –ù–∞–∂–∞—Ç–æ: {session.get('clicks', 0)}/{REQUIRED_CLICKS}\n"
                    f"üí∏ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–∞</b>",
                    chat_id=chat_id,
                    message_id=work_msg.message_id,
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.warning("Failed to cleanup work message: %s", e)
    
    context.job_queue.run_once(cleanup_work_message, WORK_TIME_LIMIT + 5)
    
    logger.info(
        "Work command used by %s (%d) in chat %d",
        user.first_name, user.id, chat_id
    )

async def cb_work_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    try:
        _, user_id_str = query.data.split(":")
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if query.from_user.id != user_id:
        await query.answer("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞!", show_alert=True)
        return
    
    chat_id = query.message.chat.id
    user = query.from_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫
    session = add_work_click(user_id, chat_id)
    
    if not session.get("active", False):
        await query.answer("‚è∞ –†–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    clicks = session.get("clicks", 0)
    start_time = session.get("start_time", 0)
    current_time = time.time()
    elapsed = current_time - start_time
    remaining_time = max(0, WORK_TIME_LIMIT - elapsed)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    if remaining_time <= 0:
        end_work_session(user_id, chat_id)
        await query.edit_message_text(
            f"‚è∞ <b>–í—Ä–µ–º—è –≤—ã—à–ª–æ!</b>\n\n"
            f"‚ùå {safe_html(user.first_name)} –Ω–µ —É—Å–ø–µ–ª(–∞) –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
            f"üìä –ù–∞–∂–∞—Ç–æ: {clicks}/{REQUIRED_CLICKS}\n"
            f"üí∏ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–∞</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if clicks == REQUIRED_CLICKS:
        # –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
        end_work_session(user_id, chat_id)
        reward = random.randint(MIN_REWARD, MAX_REWARD)
        
        owner_id = get_slave_owner(user_id)
        reward_info = ""
        
        if owner_id:
            slave_tax = int(reward * SLAVE_TAX_PERCENT / 100)
            slave_reward = reward - slave_tax
            reward_info = f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {slave_reward} –º–æ–Ω–µ—Ç (–∏–∑ {reward}, {SLAVE_TAX_PERCENT}% —Ö–æ–∑—è–∏–Ω—É)\n"
        else:
            reward_info = f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {reward} –º–æ–Ω–µ—Ç\n"
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ —á–∞—Å
        schedule_reward(user_id, chat_id, reward, context)
        
        await query.edit_message_text(
            f"‚úÖ <b>–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            f"üë§ <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> {safe_html(user.first_name)}\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {clicks}/{REQUIRED_CLICKS} ‚úÖ\n"
            f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {int(elapsed)} —Å–µ–∫.\n"
            f"{reward_info}"
            f"‚è∞ <b>–í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑:</b> 1 —á–∞—Å",
            parse_mode=ParseMode.HTML
        )
        
        logger.info(
            "Work completed by %s (%d) in chat %d, reward: %d, owner: %s",
            user.first_name, user_id, chat_id, reward, owner_id or "none"
        )
        
    elif clicks > REQUIRED_CLICKS:
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏–π - —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞
        end_work_session(user_id, chat_id)
        await query.edit_message_text(
            f"‚ùå <b>–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!</b>\n\n"
            f"üë§ {safe_html(user.first_name)} –Ω–∞–∂–∞–ª(–∞) —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑\n"
            f"üìä –ù–∞–∂–∞—Ç–æ: {clicks}/{REQUIRED_CLICKS} ‚ùå\n"
            f"üí∏ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–∞</b>\n\n"
            f"üí° <i>–ù—É–∂–Ω–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å —Ä–æ–≤–Ω–æ {REQUIRED_CLICKS} —Ä–∞–∑!</i>",
            parse_mode=ParseMode.HTML
        )
        
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        keyboard = create_work_keyboard(user_id)
        await query.edit_message_text(
            f"üî® <b>–†–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
            f"üë§ <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> {safe_html(user.first_name)}\n"
            f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {clicks}/{REQUIRED_CLICKS}\n"
            f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {int(remaining_time)} —Å–µ–∫.\n\n"
            f"üéØ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞–∂–∏–º–∞—Ç—å!</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
